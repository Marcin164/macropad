
Macropad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006754  08006754  00007754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e0  080067e0  00008110  2**0
                  CONTENTS
  4 .ARM          00000008  080067e0  080067e0  000077e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067e8  080067e8  00008110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e8  080067e8  000077e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067ec  080067ec  000077ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  080067f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  20000110  08006900  00008110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b2c  08006900  00008b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c869  00000000  00000000  00008140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002795  00000000  00000000  000149a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00017140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080f  00000000  00000000  00017c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017798  00000000  00000000  0001843f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efdd  00000000  00000000  0002fbd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008627e  00000000  00000000  0003ebb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4e32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b80  00000000  00000000  000c4e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000c79f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000110 	.word	0x20000110
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800673c 	.word	0x0800673c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000114 	.word	0x20000114
 80001d0:	0800673c 	.word	0x0800673c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fa8e 	bl	80009e8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80c 	bl	80004e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f878 	bl	80005c4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d4:	f005 fcd8 	bl	8005e88 <MX_USB_DEVICE_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  while (1) {
	    /*uint8_t HID_Buffer[8] = {0};*/
        Keypad_Scan_And_Send();
 80004d8:	f000 f904 	bl	80006e4 <Keypad_Scan_And_Send>
        HAL_Delay(50); // Debounce delay
 80004dc:	2032      	movs	r0, #50	@ 0x32
 80004de:	f000 faf5 	bl	8000acc <HAL_Delay>
        Keypad_Scan_And_Send();
 80004e2:	bf00      	nop
 80004e4:	e7f8      	b.n	80004d8 <main+0x14>
	...

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b094      	sub	sp, #80	@ 0x50
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2230      	movs	r2, #48	@ 0x30
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f006 f8f4 	bl	80066e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	4b2a      	ldr	r3, [pc, #168]	@ (80005bc <SystemClock_Config+0xd4>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000514:	4a29      	ldr	r2, [pc, #164]	@ (80005bc <SystemClock_Config+0xd4>)
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800051a:	6413      	str	r3, [r2, #64]	@ 0x40
 800051c:	4b27      	ldr	r3, [pc, #156]	@ (80005bc <SystemClock_Config+0xd4>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	4b24      	ldr	r3, [pc, #144]	@ (80005c0 <SystemClock_Config+0xd8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000534:	4a22      	ldr	r2, [pc, #136]	@ (80005c0 <SystemClock_Config+0xd8>)
 8000536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <SystemClock_Config+0xd8>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000548:	2303      	movs	r3, #3
 800054a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000550:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000552:	2301      	movs	r3, #1
 8000554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000556:	2310      	movs	r3, #16
 8000558:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000564:	230f      	movs	r3, #15
 8000566:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000568:	2390      	movs	r3, #144	@ 0x90
 800056a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000570:	2305      	movs	r3, #5
 8000572:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0320 	add.w	r3, r7, #32
 8000578:	4618      	mov	r0, r3
 800057a:	f001 ffcd 	bl	8002518 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000584:	f000 f98a 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fa30 	bl	8002a08 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005ae:	f000 f975 	bl	800089c <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3750      	adds	r7, #80	@ 0x50
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40007000 	.word	0x40007000

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <MX_GPIO_Init+0xb0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a24      	ldr	r2, [pc, #144]	@ (8000674 <MX_GPIO_Init+0xb0>)
 80005e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <MX_GPIO_Init+0xb0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <MX_GPIO_Init+0xb0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000674 <MX_GPIO_Init+0xb0>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <MX_GPIO_Init+0xb0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_GPIO_Init+0xb0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <MX_GPIO_Init+0xb0>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_GPIO_Init+0xb0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 800062e:	2201      	movs	r2, #1
 8000630:	211f      	movs	r1, #31
 8000632:	4811      	ldr	r0, [pc, #68]	@ (8000678 <MX_GPIO_Init+0xb4>)
 8000634:	f000 fd1c 	bl	8001070 <HAL_GPIO_WritePin>
                          |COL5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 8000638:	231f      	movs	r3, #31
 800063a:	60fb      	str	r3, [r7, #12]
                          |ROW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP ;
 8000640:	2301      	movs	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	4619      	mov	r1, r3
 800064a:	480c      	ldr	r0, [pc, #48]	@ (800067c <MX_GPIO_Init+0xb8>)
 800064c:	f000 fb74 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8000650:	231f      	movs	r3, #31
 8000652:	60fb      	str	r3, [r7, #12]
                          |COL5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4619      	mov	r1, r3
 8000666:	4804      	ldr	r0, [pc, #16]	@ (8000678 <MX_GPIO_Init+0xb4>)
 8000668:	f000 fb66 	bl	8000d38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40020400 	.word	0x40020400
 800067c:	40020000 	.word	0x40020000

08000680 <Send_Key_To_USB>:
//
//    USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
//    HAL_Delay(10);
//}

void Send_Key_To_USB(uint8_t *keycodes, uint8_t numKeys) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
    uint8_t HID_Buffer[8] = {0};
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]

    // Wypełnij bufor klawiszami, ale nie więcej niż MAX_KEYS
    for (uint8_t i = 0; i < numKeys && i < MAX_KEYS; i++) {
 8000694:	2300      	movs	r3, #0
 8000696:	75fb      	strb	r3, [r7, #23]
 8000698:	e00c      	b.n	80006b4 <Send_Key_To_USB+0x34>
        HID_Buffer[2 + i] = keycodes[i];
 800069a:	7dfb      	ldrb	r3, [r7, #23]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	441a      	add	r2, r3
 80006a0:	7dfb      	ldrb	r3, [r7, #23]
 80006a2:	3302      	adds	r3, #2
 80006a4:	7812      	ldrb	r2, [r2, #0]
 80006a6:	3318      	adds	r3, #24
 80006a8:	443b      	add	r3, r7
 80006aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < numKeys && i < MAX_KEYS; i++) {
 80006ae:	7dfb      	ldrb	r3, [r7, #23]
 80006b0:	3301      	adds	r3, #1
 80006b2:	75fb      	strb	r3, [r7, #23]
 80006b4:	7dfa      	ldrb	r2, [r7, #23]
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d202      	bcs.n	80006c2 <Send_Key_To_USB+0x42>
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	2b05      	cmp	r3, #5
 80006c0:	d9eb      	bls.n	800069a <Send_Key_To_USB+0x1a>
    }

    // Wyślij raport HID
    USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2208      	movs	r2, #8
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <Send_Key_To_USB+0x60>)
 80006cc:	f004 f852 	bl	8004774 <USBD_HID_SendReport>
    HAL_Delay(10);
 80006d0:	200a      	movs	r0, #10
 80006d2:	f000 f9fb 	bl	8000acc <HAL_Delay>
}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000158 	.word	0x20000158

080006e4 <Keypad_Scan_And_Send>:

void Keypad_Scan_And_Send(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
    uint8_t activeKeys[MAX_KEYS] = {0}; // Tablica na aktywne klawisze
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	2300      	movs	r3, #0
 80006f0:	813b      	strh	r3, [r7, #8]
    uint8_t keyCount = 0;              // Licznik wciśniętych klawiszy
 80006f2:	2300      	movs	r3, #0
 80006f4:	75fb      	strb	r3, [r7, #23]
    static uint8_t lastActiveKeys[MAX_KEYS] = {0}; // Poprzedni stan klawiszy
    static uint8_t lastKeyCount = 0;   // Liczba klawiszy w poprzednim raporcie
    uint8_t isStateChanged = 0;        // Flaga zmiany stanu
 80006f6:	2300      	movs	r3, #0
 80006f8:	75bb      	strb	r3, [r7, #22]

    for (int col = 0; col < 5; col++) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	e095      	b.n	800082c <Keypad_Scan_And_Send+0x148>
        HAL_GPIO_WritePin(GPIOB, outputPins[col], GPIO_PIN_RESET);
 8000700:	4a5e      	ldr	r2, [pc, #376]	@ (800087c <Keypad_Scan_And_Send+0x198>)
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000708:	2200      	movs	r2, #0
 800070a:	4619      	mov	r1, r3
 800070c:	485c      	ldr	r0, [pc, #368]	@ (8000880 <Keypad_Scan_And_Send+0x19c>)
 800070e:	f000 fcaf 	bl	8001070 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000712:	2001      	movs	r0, #1
 8000714:	f000 f9da 	bl	8000acc <HAL_Delay>

        for (int row = 0; row < 5; row++) {
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	e077      	b.n	800080e <Keypad_Scan_And_Send+0x12a>
            GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, inputPins[row]);
 800071e:	4a59      	ldr	r2, [pc, #356]	@ (8000884 <Keypad_Scan_And_Send+0x1a0>)
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000726:	4619      	mov	r1, r3
 8000728:	4857      	ldr	r0, [pc, #348]	@ (8000888 <Keypad_Scan_And_Send+0x1a4>)
 800072a:	f000 fc89 	bl	8001040 <HAL_GPIO_ReadPin>
 800072e:	4603      	mov	r3, r0
 8000730:	72fb      	strb	r3, [r7, #11]

            if (pinState == GPIO_PIN_RESET) { // Klawisz wciśnięty
 8000732:	7afb      	ldrb	r3, [r7, #11]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d150      	bne.n	80007da <Keypad_Scan_And_Send+0xf6>
                if (prevKeyPressed[row][col] == 0) {
 8000738:	4954      	ldr	r1, [pc, #336]	@ (800088c <Keypad_Scan_And_Send+0x1a8>)
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	4613      	mov	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	18ca      	adds	r2, r1, r3
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d12f      	bne.n	80007ae <Keypad_Scan_And_Send+0xca>
                    HAL_Delay(10); // Debouncing
 800074e:	200a      	movs	r0, #10
 8000750:	f000 f9bc 	bl	8000acc <HAL_Delay>
                    if (HAL_GPIO_ReadPin(GPIOA, inputPins[row]) == GPIO_PIN_RESET) {
 8000754:	4a4b      	ldr	r2, [pc, #300]	@ (8000884 <Keypad_Scan_And_Send+0x1a0>)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800075c:	4619      	mov	r1, r3
 800075e:	484a      	ldr	r0, [pc, #296]	@ (8000888 <Keypad_Scan_And_Send+0x1a4>)
 8000760:	f000 fc6e 	bl	8001040 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d14e      	bne.n	8000808 <Keypad_Scan_And_Send+0x124>
                        prevKeyPressed[row][col] = 1;
 800076a:	4948      	ldr	r1, [pc, #288]	@ (800088c <Keypad_Scan_And_Send+0x1a8>)
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	4613      	mov	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	18ca      	adds	r2, r1, r3
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	4413      	add	r3, r2
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]

                        if (keyCount < MAX_KEYS) {
 800077e:	7dfb      	ldrb	r3, [r7, #23]
 8000780:	2b05      	cmp	r3, #5
 8000782:	d811      	bhi.n	80007a8 <Keypad_Scan_And_Send+0xc4>
                            activeKeys[keyCount++] = matrix[row][col];
 8000784:	7dfb      	ldrb	r3, [r7, #23]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	75fa      	strb	r2, [r7, #23]
 800078a:	4618      	mov	r0, r3
 800078c:	4940      	ldr	r1, [pc, #256]	@ (8000890 <Keypad_Scan_And_Send+0x1ac>)
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	4613      	mov	r3, r2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4413      	add	r3, r2
 8000796:	18ca      	adds	r2, r1, r3
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	4413      	add	r3, r2
 800079c:	781a      	ldrb	r2, [r3, #0]
 800079e:	f100 0318 	add.w	r3, r0, #24
 80007a2:	443b      	add	r3, r7
 80007a4:	f803 2c14 	strb.w	r2, [r3, #-20]
                        }
                        isStateChanged = 1; // Zmieniono stan
 80007a8:	2301      	movs	r3, #1
 80007aa:	75bb      	strb	r3, [r7, #22]
 80007ac:	e02c      	b.n	8000808 <Keypad_Scan_And_Send+0x124>
                    }
                } else { // Klawisz przytrzymany
                    if (keyCount < MAX_KEYS) {
 80007ae:	7dfb      	ldrb	r3, [r7, #23]
 80007b0:	2b05      	cmp	r3, #5
 80007b2:	d829      	bhi.n	8000808 <Keypad_Scan_And_Send+0x124>
                        activeKeys[keyCount++] = matrix[row][col];
 80007b4:	7dfb      	ldrb	r3, [r7, #23]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	75fa      	strb	r2, [r7, #23]
 80007ba:	4618      	mov	r0, r3
 80007bc:	4934      	ldr	r1, [pc, #208]	@ (8000890 <Keypad_Scan_And_Send+0x1ac>)
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	4613      	mov	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	18ca      	adds	r2, r1, r3
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	4413      	add	r3, r2
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	f100 0318 	add.w	r3, r0, #24
 80007d2:	443b      	add	r3, r7
 80007d4:	f803 2c14 	strb.w	r2, [r3, #-20]
 80007d8:	e016      	b.n	8000808 <Keypad_Scan_And_Send+0x124>
                    }
                }
            } else { // Klawisz zwolniony
                if (prevKeyPressed[row][col] == 1) {
 80007da:	492c      	ldr	r1, [pc, #176]	@ (800088c <Keypad_Scan_And_Send+0x1a8>)
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	18ca      	adds	r2, r1, r3
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d10b      	bne.n	8000808 <Keypad_Scan_And_Send+0x124>
                    prevKeyPressed[row][col] = 0;
 80007f0:	4926      	ldr	r1, [pc, #152]	@ (800088c <Keypad_Scan_And_Send+0x1a8>)
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	18ca      	adds	r2, r1, r3
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
                    isStateChanged = 1; // Zmieniono stan
 8000804:	2301      	movs	r3, #1
 8000806:	75bb      	strb	r3, [r7, #22]
        for (int row = 0; row < 5; row++) {
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3301      	adds	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b04      	cmp	r3, #4
 8000812:	dd84      	ble.n	800071e <Keypad_Scan_And_Send+0x3a>
                }
            }
        }

        HAL_GPIO_WritePin(GPIOB, outputPins[col], GPIO_PIN_SET);
 8000814:	4a19      	ldr	r2, [pc, #100]	@ (800087c <Keypad_Scan_And_Send+0x198>)
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800081c:	2201      	movs	r2, #1
 800081e:	4619      	mov	r1, r3
 8000820:	4817      	ldr	r0, [pc, #92]	@ (8000880 <Keypad_Scan_And_Send+0x19c>)
 8000822:	f000 fc25 	bl	8001070 <HAL_GPIO_WritePin>
    for (int col = 0; col < 5; col++) {
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	3301      	adds	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	2b04      	cmp	r3, #4
 8000830:	f77f af66 	ble.w	8000700 <Keypad_Scan_And_Send+0x1c>
    }

    // Porównaj aktualny stan z poprzednim
    if (keyCount != lastKeyCount || isStateChanged) {
 8000834:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <Keypad_Scan_And_Send+0x1b0>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	7dfa      	ldrb	r2, [r7, #23]
 800083a:	429a      	cmp	r2, r3
 800083c:	d102      	bne.n	8000844 <Keypad_Scan_And_Send+0x160>
 800083e:	7dbb      	ldrb	r3, [r7, #22]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d010      	beq.n	8000866 <Keypad_Scan_And_Send+0x182>
        Send_Key_To_USB(activeKeys, keyCount);
 8000844:	7dfa      	ldrb	r2, [r7, #23]
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff18 	bl	8000680 <Send_Key_To_USB>
        memcpy(lastActiveKeys, activeKeys, sizeof(activeKeys));
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <Keypad_Scan_And_Send+0x1b4>)
 8000852:	1d3a      	adds	r2, r7, #4
 8000854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000858:	6018      	str	r0, [r3, #0]
 800085a:	3304      	adds	r3, #4
 800085c:	8019      	strh	r1, [r3, #0]
        lastKeyCount = keyCount;
 800085e:	4a0d      	ldr	r2, [pc, #52]	@ (8000894 <Keypad_Scan_And_Send+0x1b0>)
 8000860:	7dfb      	ldrb	r3, [r7, #23]
 8000862:	7013      	strb	r3, [r2, #0]
 8000864:	e006      	b.n	8000874 <Keypad_Scan_And_Send+0x190>
    } else {
        // Jeśli przytrzymanie, wyślij ponownie ostatni raport
        Send_Key_To_USB(lastActiveKeys, lastKeyCount);
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <Keypad_Scan_And_Send+0x1b0>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	480a      	ldr	r0, [pc, #40]	@ (8000898 <Keypad_Scan_And_Send+0x1b4>)
 800086e:	f7ff ff07 	bl	8000680 <Send_Key_To_USB>
    }
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	080067c4 	.word	0x080067c4
 8000880:	40020400 	.word	0x40020400
 8000884:	080067b8 	.word	0x080067b8
 8000888:	40020000 	.word	0x40020000
 800088c:	2000012c 	.word	0x2000012c
 8000890:	0800679c 	.word	0x0800679c
 8000894:	20000145 	.word	0x20000145
 8000898:	20000148 	.word	0x20000148

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ba:	4a0f      	ldr	r2, [pc, #60]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008c2:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	4a08      	ldr	r2, [pc, #32]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <NMI_Handler+0x4>

08000904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <MemManage_Handler+0x4>

08000914 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <UsageFault_Handler+0x4>

08000924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000952:	f000 f89b 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000960:	4802      	ldr	r0, [pc, #8]	@ (800096c <OTG_FS_IRQHandler+0x10>)
 8000962:	f000 fce2 	bl	800132a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000634 	.word	0x20000634

08000970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000998:	f7ff ffea 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	@ (80009d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	@ (80009d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	@ (80009e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c2:	f005 fe97 	bl	80066f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c6:	f7ff fd7d 	bl	80004c4 <main>
  bx  lr    
 80009ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80009d8:	080067f0 	.word	0x080067f0
  ldr r2, =_sbss
 80009dc:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80009e0:	20000b2c 	.word	0x20000b2c

080009e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a28 <HAL_Init+0x40>)
 80009f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <HAL_Init+0x40>)
 80009fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <HAL_Init+0x40>)
 8000a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f94f 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f000 f808 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff ff46 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023c00 	.word	0x40023c00

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_InitTick+0x54>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_InitTick+0x58>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f967 	bl	8000d1e <HAL_SYSTICK_Config>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00e      	b.n	8000a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b0f      	cmp	r3, #15
 8000a5e:	d80a      	bhi.n	8000a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a60:	2200      	movs	r2, #0
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295
 8000a68:	f000 f92f 	bl	8000cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	4a06      	ldr	r2, [pc, #24]	@ (8000a88 <HAL_InitTick+0x5c>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000004 	.word	0x20000004

08000a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_IncTick+0x20>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_IncTick+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <HAL_IncTick+0x24>)
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000150 	.word	0x20000150

08000ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <HAL_GetTick+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000150 	.word	0x20000150

08000acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad4:	f7ff ffee 	bl	8000ab4 <HAL_GetTick>
 8000ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae4:	d005      	beq.n	8000af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <HAL_Delay+0x44>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4413      	add	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000af2:	bf00      	nop
 8000af4:	f7ff ffde 	bl	8000ab4 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d8f7      	bhi.n	8000af4 <HAL_Delay+0x28>
  {
  }
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0b      	blt.n	8000ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 021f 	and.w	r2, r3, #31
 8000b90:	4907      	ldr	r1, [pc, #28]	@ (8000bb0 <__NVIC_EnableIRQ+0x38>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	@ (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	@ (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	@ 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	@ 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f7ff ff8e 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff29 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cdc:	f7ff ff3e 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f7ff ff8e 	bl	8000c08 <NVIC_EncodePriority>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5d 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff31 	bl	8000b78 <__NVIC_EnableIRQ>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffa2 	bl	8000c70 <SysTick_Config>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	@ 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	e159      	b.n	8001008 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d54:	2201      	movs	r2, #1
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	f040 8148 	bne.w	8001002 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d005      	beq.n	8000d8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d130      	bne.n	8000dec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68da      	ldr	r2, [r3, #12]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	091b      	lsrs	r3, r3, #4
 8000dd6:	f003 0201 	and.w	r2, r3, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d017      	beq.n	8000e28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d123      	bne.n	8000e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	08da      	lsrs	r2, r3, #3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3208      	adds	r2, #8
 8000e76:	69b9      	ldr	r1, [r7, #24]
 8000e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0203 	and.w	r2, r3, #3
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80a2 	beq.w	8001002 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b57      	ldr	r3, [pc, #348]	@ (8001020 <HAL_GPIO_Init+0x2e8>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	4a56      	ldr	r2, [pc, #344]	@ (8001020 <HAL_GPIO_Init+0x2e8>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ece:	4b54      	ldr	r3, [pc, #336]	@ (8001020 <HAL_GPIO_Init+0x2e8>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eda:	4a52      	ldr	r2, [pc, #328]	@ (8001024 <HAL_GPIO_Init+0x2ec>)
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	220f      	movs	r2, #15
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a49      	ldr	r2, [pc, #292]	@ (8001028 <HAL_GPIO_Init+0x2f0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d019      	beq.n	8000f3a <HAL_GPIO_Init+0x202>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a48      	ldr	r2, [pc, #288]	@ (800102c <HAL_GPIO_Init+0x2f4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d013      	beq.n	8000f36 <HAL_GPIO_Init+0x1fe>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a47      	ldr	r2, [pc, #284]	@ (8001030 <HAL_GPIO_Init+0x2f8>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00d      	beq.n	8000f32 <HAL_GPIO_Init+0x1fa>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a46      	ldr	r2, [pc, #280]	@ (8001034 <HAL_GPIO_Init+0x2fc>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d007      	beq.n	8000f2e <HAL_GPIO_Init+0x1f6>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a45      	ldr	r2, [pc, #276]	@ (8001038 <HAL_GPIO_Init+0x300>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d101      	bne.n	8000f2a <HAL_GPIO_Init+0x1f2>
 8000f26:	2304      	movs	r3, #4
 8000f28:	e008      	b.n	8000f3c <HAL_GPIO_Init+0x204>
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x204>
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e004      	b.n	8000f3c <HAL_GPIO_Init+0x204>
 8000f32:	2302      	movs	r3, #2
 8000f34:	e002      	b.n	8000f3c <HAL_GPIO_Init+0x204>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <HAL_GPIO_Init+0x204>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	69fa      	ldr	r2, [r7, #28]
 8000f3e:	f002 0203 	and.w	r2, r2, #3
 8000f42:	0092      	lsls	r2, r2, #2
 8000f44:	4093      	lsls	r3, r2
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f4c:	4935      	ldr	r1, [pc, #212]	@ (8001024 <HAL_GPIO_Init+0x2ec>)
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5a:	4b38      	ldr	r3, [pc, #224]	@ (800103c <HAL_GPIO_Init+0x304>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f7e:	4a2f      	ldr	r2, [pc, #188]	@ (800103c <HAL_GPIO_Init+0x304>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f84:	4b2d      	ldr	r3, [pc, #180]	@ (800103c <HAL_GPIO_Init+0x304>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa8:	4a24      	ldr	r2, [pc, #144]	@ (800103c <HAL_GPIO_Init+0x304>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fae:	4b23      	ldr	r3, [pc, #140]	@ (800103c <HAL_GPIO_Init+0x304>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800103c <HAL_GPIO_Init+0x304>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	@ (800103c <HAL_GPIO_Init+0x304>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800103c <HAL_GPIO_Init+0x304>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3301      	adds	r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	2b0f      	cmp	r3, #15
 800100c:	f67f aea2 	bls.w	8000d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3724      	adds	r7, #36	@ 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40013800 	.word	0x40013800
 8001028:	40020000 	.word	0x40020000
 800102c:	40020400 	.word	0x40020400
 8001030:	40020800 	.word	0x40020800
 8001034:	40020c00 	.word	0x40020c00
 8001038:	40021000 	.word	0x40021000
 800103c:	40013c00 	.word	0x40013c00

08001040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	887b      	ldrh	r3, [r7, #2]
 8001052:	4013      	ands	r3, r2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001058:	2301      	movs	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e001      	b.n	8001062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800108c:	e003      	b.n	8001096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	619a      	str	r2, [r3, #24]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af02      	add	r7, sp, #8
 80010a8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e101      	b.n	80012b8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d106      	bne.n	80010d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f005 f810 	bl	80060f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2203      	movs	r2, #3
 80010d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e2:	d102      	bne.n	80010ea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 ff59 	bl	8002fa6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7c1a      	ldrb	r2, [r3, #16]
 80010fc:	f88d 2000 	strb.w	r2, [sp]
 8001100:	3304      	adds	r3, #4
 8001102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001104:	f001 fe38 	bl	8002d78 <USB_CoreInit>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d005      	beq.n	800111a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2202      	movs	r2, #2
 8001112:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e0ce      	b.n	80012b8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f001 ff51 	bl	8002fc8 <USB_SetCurrentMode>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2202      	movs	r2, #2
 8001130:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e0bf      	b.n	80012b8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e04a      	b.n	80011d4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	3315      	adds	r3, #21
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	3314      	adds	r3, #20
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	b298      	uxth	r0, r3
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	332e      	adds	r3, #46	@ 0x2e
 800117a:	4602      	mov	r2, r0
 800117c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800117e:	7bfa      	ldrb	r2, [r7, #15]
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	3318      	adds	r3, #24
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	331c      	adds	r3, #28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	3320      	adds	r3, #32
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	3324      	adds	r3, #36	@ 0x24
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	3301      	adds	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	791b      	ldrb	r3, [r3, #4]
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d3af      	bcc.n	800113e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
 80011e2:	e044      	b.n	800126e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4413      	add	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	3301      	adds	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	791b      	ldrb	r3, [r3, #4]
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	429a      	cmp	r2, r3
 8001276:	d3b5      	bcc.n	80011e4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7c1a      	ldrb	r2, [r3, #16]
 8001280:	f88d 2000 	strb.w	r2, [sp]
 8001284:	3304      	adds	r3, #4
 8001286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001288:	f001 feea 	bl	8003060 <USB_DevInit>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2202      	movs	r2, #2
 8001296:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00c      	b.n	80012b8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 ff34 	bl	800411e <USB_DevDisconnect>

  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <HAL_PCD_Start+0x1c>
 80012d8:	2302      	movs	r3, #2
 80012da:	e022      	b.n	8001322 <HAL_PCD_Start+0x62>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d009      	beq.n	8001304 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fe3b 	bl	8002f84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f002 fee2 	bl	80040dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800132a:	b590      	push	{r4, r7, lr}
 800132c:	b08d      	sub	sp, #52	@ 0x34
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f002 ffa0 	bl	8004286 <USB_GetMode>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 848c 	bne.w	8001c66 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f002 ff04 	bl	8004160 <USB_ReadInterrupts>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8482 	beq.w	8001c64 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fef1 	bl	8004160 <USB_ReadInterrupts>
 800137e:	4603      	mov	r3, r0
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b02      	cmp	r3, #2
 8001386:	d107      	bne.n	8001398 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f002 0202 	and.w	r2, r2, #2
 8001396:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f002 fedf 	bl	8004160 <USB_ReadInterrupts>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d161      	bne.n	8001470 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699a      	ldr	r2, [r3, #24]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0210 	bic.w	r2, r2, #16
 80013ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	f003 020f 	and.w	r2, r3, #15
 80013c8:	4613      	mov	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	3304      	adds	r3, #4
 80013da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	0c5b      	lsrs	r3, r3, #17
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d124      	bne.n	8001432 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d035      	beq.n	8001460 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001402:	b29b      	uxth	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	6a38      	ldr	r0, [r7, #32]
 8001408:	f002 fd16 	bl	8003e38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001418:	441a      	add	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142a:	441a      	add	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	615a      	str	r2, [r3, #20]
 8001430:	e016      	b.n	8001460 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	0c5b      	lsrs	r3, r3, #17
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	2b06      	cmp	r3, #6
 800143c:	d110      	bne.n	8001460 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001444:	2208      	movs	r2, #8
 8001446:	4619      	mov	r1, r3
 8001448:	6a38      	ldr	r0, [r7, #32]
 800144a:	f002 fcf5 	bl	8003e38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	695a      	ldr	r2, [r3, #20]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800145a:	441a      	add	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0210 	orr.w	r2, r2, #16
 800146e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fe73 	bl	8004160 <USB_ReadInterrupts>
 800147a:	4603      	mov	r3, r0
 800147c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001480:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001484:	f040 80a7 	bne.w	80015d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fe78 	bl	8004186 <USB_ReadDevAllOutEpInterrupt>
 8001496:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001498:	e099      	b.n	80015ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800149a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 808e 	beq.w	80015c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 fe9c 	bl	80041ee <USB_ReadDevOutEPInterrupt>
 80014b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00c      	beq.n	80014dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c4:	015a      	lsls	r2, r3, #5
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014ce:	461a      	mov	r2, r3
 80014d0:	2301      	movs	r3, #1
 80014d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 fe8c 	bl	80021f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00c      	beq.n	8001500 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014f2:	461a      	mov	r2, r3
 80014f4:	2308      	movs	r3, #8
 80014f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 ff62 	bl	80023c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	015a      	lsls	r2, r3, #5
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	4413      	add	r3, r2
 8001512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001516:	461a      	mov	r2, r3
 8001518:	2310      	movs	r3, #16
 800151a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d030      	beq.n	8001588 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800152e:	2b80      	cmp	r3, #128	@ 0x80
 8001530:	d109      	bne.n	8001546 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001540:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001544:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	3304      	adds	r3, #4
 800155a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	78db      	ldrb	r3, [r3, #3]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d108      	bne.n	8001576 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	2200      	movs	r2, #0
 8001568:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4619      	mov	r1, r3
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f004 febb 	bl	80062ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	015a      	lsls	r2, r3, #5
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	4413      	add	r3, r2
 800157e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001582:	461a      	mov	r2, r3
 8001584:	2302      	movs	r3, #2
 8001586:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	2b00      	cmp	r3, #0
 8001590:	d008      	beq.n	80015a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	015a      	lsls	r2, r3, #5
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4413      	add	r3, r2
 800159a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800159e:	461a      	mov	r2, r3
 80015a0:	2320      	movs	r3, #32
 80015a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015ba:	461a      	mov	r2, r3
 80015bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	3301      	adds	r3, #1
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ca:	085b      	lsrs	r3, r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f47f af62 	bne.w	800149a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fdc0 	bl	8004160 <USB_ReadInterrupts>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80015ea:	f040 80db 	bne.w	80017a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 fde1 	bl	80041ba <USB_ReadDevAllInEpInterrupt>
 80015f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80015fe:	e0cd      	b.n	800179c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 80c2 	beq.w	8001790 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f002 fe07 	bl	800422a <USB_ReadDevInEPInterrupt>
 800161c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d057      	beq.n	80016d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	2201      	movs	r2, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800163c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	43db      	mvns	r3, r3
 8001642:	69f9      	ldr	r1, [r7, #28]
 8001644:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001648:	4013      	ands	r3, r2
 800164a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800164c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164e:	015a      	lsls	r2, r3, #5
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001658:	461a      	mov	r2, r3
 800165a:	2301      	movs	r3, #1
 800165c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	799b      	ldrb	r3, [r3, #6]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d132      	bne.n	80016cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166a:	4613      	mov	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3320      	adds	r3, #32
 8001676:	6819      	ldr	r1, [r3, #0]
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4403      	add	r3, r0
 8001686:	331c      	adds	r3, #28
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4419      	add	r1, r3
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4403      	add	r3, r0
 800169a:	3320      	adds	r3, #32
 800169c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d113      	bne.n	80016cc <HAL_PCD_IRQHandler+0x3a2>
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	3324      	adds	r3, #36	@ 0x24
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d108      	bne.n	80016cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016c4:	461a      	mov	r2, r3
 80016c6:	2101      	movs	r1, #1
 80016c8:	f002 fe0e 	bl	80042e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	4619      	mov	r1, r3
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f004 fd8f 	bl	80061f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d008      	beq.n	80016f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016ee:	461a      	mov	r2, r3
 80016f0:	2308      	movs	r3, #8
 80016f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800170a:	461a      	mov	r2, r3
 800170c:	2310      	movs	r3, #16
 800170e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001716:	2b00      	cmp	r3, #0
 8001718:	d008      	beq.n	800172c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171c:	015a      	lsls	r2, r3, #5
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	4413      	add	r3, r2
 8001722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001726:	461a      	mov	r2, r3
 8001728:	2340      	movs	r3, #64	@ 0x40
 800172a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d023      	beq.n	800177e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001736:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001738:	6a38      	ldr	r0, [r7, #32]
 800173a:	f001 fdf5 	bl	8003328 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800173e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	3310      	adds	r3, #16
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	3304      	adds	r3, #4
 8001750:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	78db      	ldrb	r3, [r3, #3]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2200      	movs	r2, #0
 800175e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001762:	b2db      	uxtb	r3, r3
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f004 fdd2 	bl	8006310 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176e:	015a      	lsls	r2, r3, #5
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	4413      	add	r3, r2
 8001774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001778:	461a      	mov	r2, r3
 800177a:	2302      	movs	r3, #2
 800177c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001788:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fca5 	bl	80020da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001792:	3301      	adds	r3, #1
 8001794:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001798:	085b      	lsrs	r3, r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800179c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f47f af2e 	bne.w	8001600 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 fcd9 	bl	8004160 <USB_ReadInterrupts>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80017b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017b8:	d122      	bne.n	8001800 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d108      	bne.n	80017ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017e0:	2100      	movs	r1, #0
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fe8c 	bl	8002500 <HAL_PCDEx_LPM_Callback>
 80017e8:	e002      	b.n	80017f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f004 fd70 	bl	80062d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80017fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fcab 	bl	8004160 <USB_ReadInterrupts>
 800180a:	4603      	mov	r3, r0
 800180c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001814:	d112      	bne.n	800183c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b01      	cmp	r3, #1
 8001824:	d102      	bne.n	800182c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f004 fd2c 	bl	8006284 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800183a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f002 fc8d 	bl	8004160 <USB_ReadInterrupts>
 8001846:	4603      	mov	r3, r0
 8001848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800184c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001850:	f040 80b7 	bne.w	80019c2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001862:	f023 0301 	bic.w	r3, r3, #1
 8001866:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2110      	movs	r1, #16
 800186e:	4618      	mov	r0, r3
 8001870:	f001 fd5a 	bl	8003328 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001874:	2300      	movs	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001878:	e046      	b.n	8001908 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800187a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	4413      	add	r3, r2
 8001882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001886:	461a      	mov	r2, r3
 8001888:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800188c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800188e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800189e:	0151      	lsls	r1, r2, #5
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	440a      	add	r2, r1
 80018a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80018a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018ba:	461a      	mov	r2, r3
 80018bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018d2:	0151      	lsls	r1, r2, #5
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	440a      	add	r2, r1
 80018d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e4:	015a      	lsls	r2, r3, #5
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018f2:	0151      	lsls	r1, r2, #5
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	440a      	add	r2, r1
 80018f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001900:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001904:	3301      	adds	r3, #1
 8001906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	791b      	ldrb	r3, [r3, #4]
 800190c:	461a      	mov	r2, r3
 800190e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001910:	4293      	cmp	r3, r2
 8001912:	d3b2      	bcc.n	800187a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001922:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001926:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7bdb      	ldrb	r3, [r3, #15]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d016      	beq.n	800195e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001940:	f043 030b 	orr.w	r3, r3, #11
 8001944:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800194e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001956:	f043 030b 	orr.w	r3, r3, #11
 800195a:	6453      	str	r3, [r2, #68]	@ 0x44
 800195c:	e015      	b.n	800198a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800196c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001970:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001974:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001984:	f043 030b 	orr.w	r3, r3, #11
 8001988:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001998:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800199c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019ac:	461a      	mov	r2, r3
 80019ae:	f002 fc9b 	bl	80042e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	695a      	ldr	r2, [r3, #20]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fbca 	bl	8004160 <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019d6:	d123      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 fc60 	bl	80042a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f001 fd17 	bl	800341a <USB_GetDevSpeed>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681c      	ldr	r4, [r3, #0]
 80019f8:	f001 f9b2 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 80019fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a02:	461a      	mov	r2, r3
 8001a04:	4620      	mov	r0, r4
 8001a06:	f001 fa1b 	bl	8002e40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f004 fc1b 	bl	8006246 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 fb9b 	bl	8004160 <USB_ReadInterrupts>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d10a      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f004 fbf8 	bl	800622a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f002 0208 	and.w	r2, r2, #8
 8001a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 fb86 	bl	8004160 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a5a:	2b80      	cmp	r3, #128	@ 0x80
 8001a5c:	d123      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6e:	e014      	b.n	8001a9a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a74:	4613      	mov	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4413      	add	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 faf2 	bl	8002078 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	3301      	adds	r3, #1
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	791b      	ldrb	r3, [r3, #4]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d3e4      	bcc.n	8001a70 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 fb58 	bl	8004160 <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001aba:	d13c      	bne.n	8001b36 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001abc:	2301      	movs	r3, #1
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac0:	e02b      	b.n	8001b1a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	015a      	lsls	r2, r3, #5
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4413      	add	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	3318      	adds	r3, #24
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d115      	bne.n	8001b14 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ae8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	da12      	bge.n	8001b14 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	3317      	adds	r3, #23
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fab2 	bl	8002078 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b16:	3301      	adds	r3, #1
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	791b      	ldrb	r3, [r3, #4]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d3cd      	bcc.n	8001ac2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 fb10 	bl	8004160 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b4a:	d156      	bne.n	8001bfa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b50:	e045      	b.n	8001bde <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	015a      	lsls	r2, r3, #5
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d12e      	bne.n	8001bd8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	da2b      	bge.n	8001bd8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b8c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d121      	bne.n	8001bd8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10a      	bne.n	8001bd8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd4:	6053      	str	r3, [r2, #4]
            break;
 8001bd6:	e008      	b.n	8001bea <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	3301      	adds	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	791b      	ldrb	r3, [r3, #4]
 8001be2:	461a      	mov	r2, r3
 8001be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d3b3      	bcc.n	8001b52 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 faae 	bl	8004160 <USB_ReadInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c0e:	d10a      	bne.n	8001c26 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f004 fb8f 	bl	8006334 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fa98 	bl	8004160 <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d115      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f004 fb7f 	bl	8006350 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	e000      	b.n	8001c66 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c64:	bf00      	nop
    }
  }
}
 8001c66:	3734      	adds	r7, #52	@ 0x34
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd90      	pop	{r4, r7, pc}

08001c6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_PCD_SetAddress+0x1a>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e012      	b.n	8001cac <HAL_PCD_SetAddress+0x40>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 f9f7 	bl	8004090 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	70fb      	strb	r3, [r7, #3]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	803b      	strh	r3, [r7, #0]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	da0f      	bge.n	8001cfa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	f003 020f 	and.w	r2, r3, #15
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	3310      	adds	r3, #16
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	3304      	adds	r3, #4
 8001cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	705a      	strb	r2, [r3, #1]
 8001cf8:	e00f      	b.n	8001d1a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	f003 020f 	and.w	r2, r3, #15
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	3304      	adds	r3, #4
 8001d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001d26:	883b      	ldrh	r3, [r7, #0]
 8001d28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	78ba      	ldrb	r2, [r7, #2]
 8001d34:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	785b      	ldrb	r3, [r3, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d48:	78bb      	ldrb	r3, [r7, #2]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d102      	bne.n	8001d54 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_PCD_EP_Open+0xae>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e00e      	b.n	8001d80 <HAL_PCD_EP_Open+0xcc>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68f9      	ldr	r1, [r7, #12]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 fb77 	bl	8003464 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	da0f      	bge.n	8001dbc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	f003 020f 	and.w	r2, r3, #15
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	3310      	adds	r3, #16
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	3304      	adds	r3, #4
 8001db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	705a      	strb	r2, [r3, #1]
 8001dba:	e00f      	b.n	8001ddc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	f003 020f 	and.w	r2, r3, #15
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_PCD_EP_Close+0x6e>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e00e      	b.n	8001e14 <HAL_PCD_EP_Close+0x8c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f001 fbb5 	bl	8003574 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e2c:	7afb      	ldrb	r3, [r7, #11]
 8001e2e:	f003 020f 	and.w	r2, r3, #15
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2200      	movs	r2, #0
 8001e56:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	799b      	ldrb	r3, [r3, #6]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	799b      	ldrb	r3, [r3, #6]
 8001e80:	461a      	mov	r2, r3
 8001e82:	6979      	ldr	r1, [r7, #20]
 8001e84:	f001 fc52 	bl	800372c <USB_EPStartXfer>

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ea2:	7afb      	ldrb	r3, [r7, #11]
 8001ea4:	f003 020f 	and.w	r2, r3, #15
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	3310      	adds	r3, #16
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	799b      	ldrb	r3, [r3, #6]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d102      	bne.n	8001eec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	799b      	ldrb	r3, [r3, #6]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	6979      	ldr	r1, [r7, #20]
 8001ef8:	f001 fc18 	bl	800372c <USB_EPStartXfer>

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	7912      	ldrb	r2, [r2, #4]
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e04f      	b.n	8001fc4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	da0f      	bge.n	8001f4c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 020f 	and.w	r2, r3, #15
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	3310      	adds	r3, #16
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	3304      	adds	r3, #4
 8001f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	705a      	strb	r2, [r3, #1]
 8001f4a:	e00d      	b.n	8001f68 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3304      	adds	r3, #4
 8001f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_PCD_EP_SetStall+0x82>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e01d      	b.n	8001fc4 <HAL_PCD_EP_SetStall+0xbe>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68f9      	ldr	r1, [r7, #12]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f001 ffa6 	bl	8003ee8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7999      	ldrb	r1, [r3, #6]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f002 f997 	bl	80042e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	7912      	ldrb	r2, [r2, #4]
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e042      	b.n	8002070 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da0f      	bge.n	8002012 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	f003 020f 	and.w	r2, r3, #15
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	3310      	adds	r3, #16
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	705a      	strb	r2, [r3, #1]
 8002010:	e00f      	b.n	8002032 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	f003 020f 	and.w	r2, r3, #15
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	4413      	add	r3, r2
 8002028:	3304      	adds	r3, #4
 800202a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	b2da      	uxtb	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_PCD_EP_ClrStall+0x86>
 800204e:	2302      	movs	r3, #2
 8002050:	e00e      	b.n	8002070 <HAL_PCD_EP_ClrStall+0xa4>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68f9      	ldr	r1, [r7, #12]
 8002060:	4618      	mov	r0, r3
 8002062:	f001 ffaf 	bl	8003fc4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b00      	cmp	r3, #0
 800208a:	da0c      	bge.n	80020a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 020f 	and.w	r2, r3, #15
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	3310      	adds	r3, #16
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	3304      	adds	r3, #4
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e00c      	b.n	80020c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 020f 	and.w	r2, r3, #15
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	3304      	adds	r3, #4
 80020be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68f9      	ldr	r1, [r7, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f001 fdce 	bl	8003c68 <USB_EPStopXfer>
 80020cc:	4603      	mov	r3, r0
 80020ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020d0:	7afb      	ldrb	r3, [r7, #11]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b08a      	sub	sp, #40	@ 0x28
 80020de:	af02      	add	r7, sp, #8
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	3310      	adds	r3, #16
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	3304      	adds	r3, #4
 8002100:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	429a      	cmp	r2, r3
 800210c:	d901      	bls.n	8002112 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e06b      	b.n	80021ea <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	429a      	cmp	r2, r3
 8002126:	d902      	bls.n	800212e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3303      	adds	r3, #3
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002136:	e02a      	b.n	800218e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	429a      	cmp	r2, r3
 800214c:	d902      	bls.n	8002154 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	3303      	adds	r3, #3
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	68d9      	ldr	r1, [r3, #12]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	4603      	mov	r3, r0
 8002170:	6978      	ldr	r0, [r7, #20]
 8002172:	f001 fe23 	bl	8003dbc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	441a      	add	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	441a      	add	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4413      	add	r3, r2
 8002196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d809      	bhi.n	80021b8 <PCD_WriteEmptyTxFifo+0xde>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d203      	bcs.n	80021b8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1bf      	bne.n	8002138 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d811      	bhi.n	80021e8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	2201      	movs	r2, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	43db      	mvns	r3, r3
 80021de:	6939      	ldr	r1, [r7, #16]
 80021e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021e4:	4013      	ands	r3, r2
 80021e6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3720      	adds	r7, #32
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	333c      	adds	r3, #60	@ 0x3c
 800220c:	3304      	adds	r3, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	799b      	ldrb	r3, [r3, #6]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d17b      	bne.n	8002322 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d015      	beq.n	8002260 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	4a61      	ldr	r2, [pc, #388]	@ (80023bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	f240 80b9 	bls.w	80023b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80b3 	beq.w	80023b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002256:	461a      	mov	r2, r3
 8002258:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800225c:	6093      	str	r3, [r2, #8]
 800225e:	e0a7      	b.n	80023b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f003 0320 	and.w	r3, r3, #32
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002276:	461a      	mov	r2, r3
 8002278:	2320      	movs	r3, #32
 800227a:	6093      	str	r3, [r2, #8]
 800227c:	e098      	b.n	80023b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	f040 8093 	bne.w	80023b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	4a4b      	ldr	r2, [pc, #300]	@ (80023bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d90f      	bls.n	80022b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022a8:	461a      	mov	r2, r3
 80022aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022ae:	6093      	str	r3, [r2, #8]
 80022b0:	e07e      	b.n	80023b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	3304      	adds	r3, #4
 80022c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a1a      	ldr	r2, [r3, #32]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	0159      	lsls	r1, r3, #5
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	440b      	add	r3, r1
 80022d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022de:	1ad2      	subs	r2, r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d114      	bne.n	8002314 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022fc:	461a      	mov	r2, r3
 80022fe:	2101      	movs	r1, #1
 8002300:	f001 fff2 	bl	80042e8 <USB_EP0_OutStart>
 8002304:	e006      	b.n	8002314 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	441a      	add	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	4619      	mov	r1, r3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f003 ff50 	bl	80061c0 <HAL_PCD_DataOutStageCallback>
 8002320:	e046      	b.n	80023b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	4a26      	ldr	r2, [pc, #152]	@ (80023c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d124      	bne.n	8002374 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002340:	461a      	mov	r2, r3
 8002342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002346:	6093      	str	r3, [r2, #8]
 8002348:	e032      	b.n	80023b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	4413      	add	r3, r2
 800235c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002360:	461a      	mov	r2, r3
 8002362:	2320      	movs	r3, #32
 8002364:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f003 ff27 	bl	80061c0 <HAL_PCD_DataOutStageCallback>
 8002372:	e01d      	b.n	80023b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d114      	bne.n	80023a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d108      	bne.n	80023a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800239c:	461a      	mov	r2, r3
 800239e:	2100      	movs	r1, #0
 80023a0:	f001 ffa2 	bl	80042e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f003 ff08 	bl	80061c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3720      	adds	r7, #32
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	4f54300a 	.word	0x4f54300a
 80023c0:	4f54310a 	.word	0x4f54310a

080023c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	333c      	adds	r3, #60	@ 0x3c
 80023dc:	3304      	adds	r3, #4
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4a15      	ldr	r2, [pc, #84]	@ (800244c <PCD_EP_OutSetupPacket_int+0x88>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d90e      	bls.n	8002418 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4413      	add	r3, r2
 800240c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002410:	461a      	mov	r2, r3
 8002412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002416:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f003 febf 	bl	800619c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <PCD_EP_OutSetupPacket_int+0x88>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d90c      	bls.n	8002440 <PCD_EP_OutSetupPacket_int+0x7c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	799b      	ldrb	r3, [r3, #6]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d108      	bne.n	8002440 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002438:	461a      	mov	r2, r3
 800243a:	2101      	movs	r1, #1
 800243c:	f001 ff54 	bl	80042e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	4f54300a 	.word	0x4f54300a

08002450 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
 800245c:	4613      	mov	r3, r2
 800245e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d107      	bne.n	800247e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800246e:	883b      	ldrh	r3, [r7, #0]
 8002470:	0419      	lsls	r1, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	430a      	orrs	r2, r1
 800247a:	629a      	str	r2, [r3, #40]	@ 0x28
 800247c:	e028      	b.n	80024d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	4413      	add	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e00d      	b.n	80024ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	3340      	adds	r3, #64	@ 0x40
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	4413      	add	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	3301      	adds	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	7bfa      	ldrb	r2, [r7, #15]
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d3ec      	bcc.n	8002492 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024b8:	883b      	ldrh	r3, [r7, #0]
 80024ba:	0418      	lsls	r0, r3, #16
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	4302      	orrs	r2, r0
 80024c8:	3340      	adds	r3, #64	@ 0x40
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e267      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d075      	beq.n	8002622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002536:	4b88      	ldr	r3, [pc, #544]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b04      	cmp	r3, #4
 8002540:	d00c      	beq.n	800255c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002542:	4b85      	ldr	r3, [pc, #532]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800254a:	2b08      	cmp	r3, #8
 800254c:	d112      	bne.n	8002574 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254e:	4b82      	ldr	r3, [pc, #520]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800255a:	d10b      	bne.n	8002574 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	4b7e      	ldr	r3, [pc, #504]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d05b      	beq.n	8002620 <HAL_RCC_OscConfig+0x108>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d157      	bne.n	8002620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e242      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800257c:	d106      	bne.n	800258c <HAL_RCC_OscConfig+0x74>
 800257e:	4b76      	ldr	r3, [pc, #472]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a75      	ldr	r2, [pc, #468]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e01d      	b.n	80025c8 <HAL_RCC_OscConfig+0xb0>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x98>
 8002596:	4b70      	ldr	r3, [pc, #448]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6f      	ldr	r2, [pc, #444]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 800259c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a6c      	ldr	r2, [pc, #432]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e00b      	b.n	80025c8 <HAL_RCC_OscConfig+0xb0>
 80025b0:	4b69      	ldr	r3, [pc, #420]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a68      	ldr	r2, [pc, #416]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 80025b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b66      	ldr	r3, [pc, #408]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a65      	ldr	r2, [pc, #404]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 80025c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d013      	beq.n	80025f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7fe fa70 	bl	8000ab4 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7fe fa6c 	bl	8000ab4 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	@ 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e207      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0xc0>
 80025f6:	e014      	b.n	8002622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7fe fa5c 	bl	8000ab4 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe fa58 	bl	8000ab4 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	@ 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e1f3      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	4b51      	ldr	r3, [pc, #324]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0xe8>
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d063      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800262e:	4b4a      	ldr	r3, [pc, #296]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263a:	4b47      	ldr	r3, [pc, #284]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002642:	2b08      	cmp	r3, #8
 8002644:	d11c      	bne.n	8002680 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002646:	4b44      	ldr	r3, [pc, #272]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d116      	bne.n	8002680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002652:	4b41      	ldr	r3, [pc, #260]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_RCC_OscConfig+0x152>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d001      	beq.n	800266a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e1c7      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266a:	4b3b      	ldr	r3, [pc, #236]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4937      	ldr	r1, [pc, #220]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267e:	e03a      	b.n	80026f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002688:	4b34      	ldr	r3, [pc, #208]	@ (800275c <HAL_RCC_OscConfig+0x244>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7fe fa11 	bl	8000ab4 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002696:	f7fe fa0d 	bl	8000ab4 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e1a8      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b4:	4b28      	ldr	r3, [pc, #160]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4925      	ldr	r1, [pc, #148]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]
 80026c8:	e015      	b.n	80026f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ca:	4b24      	ldr	r3, [pc, #144]	@ (800275c <HAL_RCC_OscConfig+0x244>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe f9f0 	bl	8000ab4 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d8:	f7fe f9ec 	bl	8000ab4 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e187      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d036      	beq.n	8002770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d016      	beq.n	8002738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270a:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <HAL_RCC_OscConfig+0x248>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe f9d0 	bl	8000ab4 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002718:	f7fe f9cc 	bl	8000ab4 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e167      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272a:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <HAL_RCC_OscConfig+0x240>)
 800272c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x200>
 8002736:	e01b      	b.n	8002770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002738:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <HAL_RCC_OscConfig+0x248>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7fe f9b9 	bl	8000ab4 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002744:	e00e      	b.n	8002764 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002746:	f7fe f9b5 	bl	8000ab4 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d907      	bls.n	8002764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e150      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
 8002758:	40023800 	.word	0x40023800
 800275c:	42470000 	.word	0x42470000
 8002760:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	4b88      	ldr	r3, [pc, #544]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 8002766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1ea      	bne.n	8002746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 8097 	beq.w	80028ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002782:	4b81      	ldr	r3, [pc, #516]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10f      	bne.n	80027ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	4b7d      	ldr	r3, [pc, #500]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	4a7c      	ldr	r2, [pc, #496]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279c:	6413      	str	r3, [r2, #64]	@ 0x40
 800279e:	4b7a      	ldr	r3, [pc, #488]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ae:	4b77      	ldr	r3, [pc, #476]	@ (800298c <HAL_RCC_OscConfig+0x474>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d118      	bne.n	80027ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ba:	4b74      	ldr	r3, [pc, #464]	@ (800298c <HAL_RCC_OscConfig+0x474>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a73      	ldr	r2, [pc, #460]	@ (800298c <HAL_RCC_OscConfig+0x474>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c6:	f7fe f975 	bl	8000ab4 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe f971 	bl	8000ab4 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e10c      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	4b6a      	ldr	r3, [pc, #424]	@ (800298c <HAL_RCC_OscConfig+0x474>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x2ea>
 80027f4:	4b64      	ldr	r3, [pc, #400]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f8:	4a63      	ldr	r2, [pc, #396]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002800:	e01c      	b.n	800283c <HAL_RCC_OscConfig+0x324>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b05      	cmp	r3, #5
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x30c>
 800280a:	4b5f      	ldr	r3, [pc, #380]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280e:	4a5e      	ldr	r2, [pc, #376]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 8002810:	f043 0304 	orr.w	r3, r3, #4
 8002814:	6713      	str	r3, [r2, #112]	@ 0x70
 8002816:	4b5c      	ldr	r3, [pc, #368]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281a:	4a5b      	ldr	r2, [pc, #364]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6713      	str	r3, [r2, #112]	@ 0x70
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0x324>
 8002824:	4b58      	ldr	r3, [pc, #352]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002828:	4a57      	ldr	r2, [pc, #348]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002830:	4b55      	ldr	r3, [pc, #340]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002834:	4a54      	ldr	r2, [pc, #336]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 8002836:	f023 0304 	bic.w	r3, r3, #4
 800283a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d015      	beq.n	8002870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7fe f936 	bl	8000ab4 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284a:	e00a      	b.n	8002862 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284c:	f7fe f932 	bl	8000ab4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e0cb      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002862:	4b49      	ldr	r3, [pc, #292]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0ee      	beq.n	800284c <HAL_RCC_OscConfig+0x334>
 800286e:	e014      	b.n	800289a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002870:	f7fe f920 	bl	8000ab4 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002876:	e00a      	b.n	800288e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002878:	f7fe f91c 	bl	8000ab4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e0b5      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288e:	4b3e      	ldr	r3, [pc, #248]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1ee      	bne.n	8002878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800289a:	7dfb      	ldrb	r3, [r7, #23]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d105      	bne.n	80028ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a0:	4b39      	ldr	r3, [pc, #228]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	4a38      	ldr	r2, [pc, #224]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 80028a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80a1 	beq.w	80029f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028b6:	4b34      	ldr	r3, [pc, #208]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d05c      	beq.n	800297c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d141      	bne.n	800294e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	4b31      	ldr	r3, [pc, #196]	@ (8002990 <HAL_RCC_OscConfig+0x478>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7fe f8f0 	bl	8000ab4 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7fe f8ec 	bl	8000ab4 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e087      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002904:	019b      	lsls	r3, r3, #6
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	3b01      	subs	r3, #1
 8002910:	041b      	lsls	r3, r3, #16
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	061b      	lsls	r3, r3, #24
 800291a:	491b      	ldr	r1, [pc, #108]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002920:	4b1b      	ldr	r3, [pc, #108]	@ (8002990 <HAL_RCC_OscConfig+0x478>)
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fe f8c5 	bl	8000ab4 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292e:	f7fe f8c1 	bl	8000ab4 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e05c      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002940:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x416>
 800294c:	e054      	b.n	80029f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <HAL_RCC_OscConfig+0x478>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe f8ae 	bl	8000ab4 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe f8aa 	bl	8000ab4 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e045      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <HAL_RCC_OscConfig+0x470>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x444>
 800297a:	e03d      	b.n	80029f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d107      	bne.n	8002994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e038      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
 8002988:	40023800 	.word	0x40023800
 800298c:	40007000 	.word	0x40007000
 8002990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002994:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <HAL_RCC_OscConfig+0x4ec>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d028      	beq.n	80029f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d121      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d11a      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029c4:	4013      	ands	r3, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d111      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	3b01      	subs	r3, #1
 80029de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d107      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800

08002a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0cc      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b68      	ldr	r3, [pc, #416]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d90c      	bls.n	8002a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b65      	ldr	r3, [pc, #404]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b63      	ldr	r3, [pc, #396]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0b8      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d020      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a5c:	4b59      	ldr	r3, [pc, #356]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a58      	ldr	r2, [pc, #352]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a74:	4b53      	ldr	r3, [pc, #332]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4a52      	ldr	r2, [pc, #328]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a80:	4b50      	ldr	r3, [pc, #320]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	494d      	ldr	r1, [pc, #308]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d044      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	4b47      	ldr	r3, [pc, #284]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d119      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e07f      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e06f      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e067      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae6:	4b37      	ldr	r3, [pc, #220]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f023 0203 	bic.w	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4934      	ldr	r1, [pc, #208]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af8:	f7fd ffdc 	bl	8000ab4 <HAL_GetTick>
 8002afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b00:	f7fd ffd8 	bl	8000ab4 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e04f      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b16:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 020c 	and.w	r2, r3, #12
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d1eb      	bne.n	8002b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b28:	4b25      	ldr	r3, [pc, #148]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d20c      	bcs.n	8002b50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b22      	ldr	r3, [pc, #136]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3e:	4b20      	ldr	r3, [pc, #128]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e032      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b5c:	4b19      	ldr	r3, [pc, #100]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4916      	ldr	r1, [pc, #88]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b7a:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	490e      	ldr	r1, [pc, #56]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b8e:	f000 f821 	bl	8002bd4 <HAL_RCC_GetSysClockFreq>
 8002b92:	4602      	mov	r2, r0
 8002b94:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	490a      	ldr	r1, [pc, #40]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	5ccb      	ldrb	r3, [r1, r3]
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	4a09      	ldr	r2, [pc, #36]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002baa:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd ff3c 	bl	8000a2c <HAL_InitTick>

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023c00 	.word	0x40023c00
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	080067d0 	.word	0x080067d0
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	20000004 	.word	0x20000004

08002bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd8:	b090      	sub	sp, #64	@ 0x40
 8002bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bec:	4b59      	ldr	r3, [pc, #356]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d00d      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x40>
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	f200 80a1 	bhi.w	8002d40 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0x34>
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d003      	beq.n	8002c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c06:	e09b      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c08:	4b53      	ldr	r3, [pc, #332]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c0c:	e09b      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c0e:	4b53      	ldr	r3, [pc, #332]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c12:	e098      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c14:	4b4f      	ldr	r3, [pc, #316]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c1e:	4b4d      	ldr	r3, [pc, #308]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d028      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	099b      	lsrs	r3, r3, #6
 8002c30:	2200      	movs	r2, #0
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4b47      	ldr	r3, [pc, #284]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c40:	fb03 f201 	mul.w	r2, r3, r1
 8002c44:	2300      	movs	r3, #0
 8002c46:	fb00 f303 	mul.w	r3, r0, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a43      	ldr	r2, [pc, #268]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c4e:	fba0 1202 	umull	r1, r2, r0, r2
 8002c52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c54:	460a      	mov	r2, r1
 8002c56:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c5a:	4413      	add	r3, r2
 8002c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c60:	2200      	movs	r2, #0
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	61fa      	str	r2, [r7, #28]
 8002c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c6e:	f7fd fab1 	bl	80001d4 <__aeabi_uldivmod>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4613      	mov	r3, r2
 8002c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c7a:	e053      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7c:	4b35      	ldr	r3, [pc, #212]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	099b      	lsrs	r3, r3, #6
 8002c82:	2200      	movs	r2, #0
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	617a      	str	r2, [r7, #20]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c8e:	f04f 0b00 	mov.w	fp, #0
 8002c92:	4652      	mov	r2, sl
 8002c94:	465b      	mov	r3, fp
 8002c96:	f04f 0000 	mov.w	r0, #0
 8002c9a:	f04f 0100 	mov.w	r1, #0
 8002c9e:	0159      	lsls	r1, r3, #5
 8002ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca4:	0150      	lsls	r0, r2, #5
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	ebb2 080a 	subs.w	r8, r2, sl
 8002cae:	eb63 090b 	sbc.w	r9, r3, fp
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cc6:	ebb2 0408 	subs.w	r4, r2, r8
 8002cca:	eb63 0509 	sbc.w	r5, r3, r9
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	00eb      	lsls	r3, r5, #3
 8002cd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cdc:	00e2      	lsls	r2, r4, #3
 8002cde:	4614      	mov	r4, r2
 8002ce0:	461d      	mov	r5, r3
 8002ce2:	eb14 030a 	adds.w	r3, r4, sl
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	eb45 030b 	adc.w	r3, r5, fp
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	028b      	lsls	r3, r1, #10
 8002cfe:	4621      	mov	r1, r4
 8002d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d04:	4621      	mov	r1, r4
 8002d06:	028a      	lsls	r2, r1, #10
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0e:	2200      	movs	r2, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	60fa      	str	r2, [r7, #12]
 8002d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d18:	f7fd fa5c 	bl	80001d4 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d24:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	0c1b      	lsrs	r3, r3, #16
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d3e:	e002      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d40:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3740      	adds	r7, #64	@ 0x40
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800
 8002d58:	00f42400 	.word	0x00f42400
 8002d5c:	017d7840 	.word	0x017d7840

08002d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d64:	4b03      	ldr	r3, [pc, #12]	@ (8002d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000000 	.word	0x20000000

08002d78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d78:	b084      	sub	sp, #16
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	f107 001c 	add.w	r0, r7, #28
 8002d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d123      	bne.n	8002dda <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002da6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002dba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d105      	bne.n	8002dce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f001 fae8 	bl	80043a4 <USB_CoreReset>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	73fb      	strb	r3, [r7, #15]
 8002dd8:	e01b      	b.n	8002e12 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f001 fadc 	bl	80043a4 <USB_CoreReset>
 8002dec:	4603      	mov	r3, r0
 8002dee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002df0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d106      	bne.n	8002e06 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e04:	e005      	b.n	8002e12 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002e12:	7fbb      	ldrb	r3, [r7, #30]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d10b      	bne.n	8002e30 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f043 0206 	orr.w	r2, r3, #6
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e3c:	b004      	add	sp, #16
 8002e3e:	4770      	bx	lr

08002e40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d165      	bne.n	8002f20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4a41      	ldr	r2, [pc, #260]	@ (8002f5c <USB_SetTurnaroundTime+0x11c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d906      	bls.n	8002e6a <USB_SetTurnaroundTime+0x2a>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4a40      	ldr	r2, [pc, #256]	@ (8002f60 <USB_SetTurnaroundTime+0x120>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d202      	bcs.n	8002e6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002e64:	230f      	movs	r3, #15
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	e062      	b.n	8002f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4a3c      	ldr	r2, [pc, #240]	@ (8002f60 <USB_SetTurnaroundTime+0x120>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d306      	bcc.n	8002e80 <USB_SetTurnaroundTime+0x40>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4a3b      	ldr	r2, [pc, #236]	@ (8002f64 <USB_SetTurnaroundTime+0x124>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d202      	bcs.n	8002e80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e7a:	230e      	movs	r3, #14
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e057      	b.n	8002f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4a38      	ldr	r2, [pc, #224]	@ (8002f64 <USB_SetTurnaroundTime+0x124>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d306      	bcc.n	8002e96 <USB_SetTurnaroundTime+0x56>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4a37      	ldr	r2, [pc, #220]	@ (8002f68 <USB_SetTurnaroundTime+0x128>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d202      	bcs.n	8002e96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e90:	230d      	movs	r3, #13
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e04c      	b.n	8002f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4a33      	ldr	r2, [pc, #204]	@ (8002f68 <USB_SetTurnaroundTime+0x128>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d306      	bcc.n	8002eac <USB_SetTurnaroundTime+0x6c>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4a32      	ldr	r2, [pc, #200]	@ (8002f6c <USB_SetTurnaroundTime+0x12c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d802      	bhi.n	8002eac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e041      	b.n	8002f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4a2f      	ldr	r2, [pc, #188]	@ (8002f6c <USB_SetTurnaroundTime+0x12c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d906      	bls.n	8002ec2 <USB_SetTurnaroundTime+0x82>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8002f70 <USB_SetTurnaroundTime+0x130>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d802      	bhi.n	8002ec2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ebc:	230b      	movs	r3, #11
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e036      	b.n	8002f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f70 <USB_SetTurnaroundTime+0x130>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d906      	bls.n	8002ed8 <USB_SetTurnaroundTime+0x98>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4a29      	ldr	r2, [pc, #164]	@ (8002f74 <USB_SetTurnaroundTime+0x134>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d802      	bhi.n	8002ed8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002ed2:	230a      	movs	r3, #10
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	e02b      	b.n	8002f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4a26      	ldr	r2, [pc, #152]	@ (8002f74 <USB_SetTurnaroundTime+0x134>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d906      	bls.n	8002eee <USB_SetTurnaroundTime+0xae>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4a25      	ldr	r2, [pc, #148]	@ (8002f78 <USB_SetTurnaroundTime+0x138>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d202      	bcs.n	8002eee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002ee8:	2309      	movs	r3, #9
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	e020      	b.n	8002f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4a21      	ldr	r2, [pc, #132]	@ (8002f78 <USB_SetTurnaroundTime+0x138>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d306      	bcc.n	8002f04 <USB_SetTurnaroundTime+0xc4>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4a20      	ldr	r2, [pc, #128]	@ (8002f7c <USB_SetTurnaroundTime+0x13c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d802      	bhi.n	8002f04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002efe:	2308      	movs	r3, #8
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	e015      	b.n	8002f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4a1d      	ldr	r2, [pc, #116]	@ (8002f7c <USB_SetTurnaroundTime+0x13c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d906      	bls.n	8002f1a <USB_SetTurnaroundTime+0xda>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f80 <USB_SetTurnaroundTime+0x140>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d202      	bcs.n	8002f1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002f14:	2307      	movs	r3, #7
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	e00a      	b.n	8002f30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002f1a:	2306      	movs	r3, #6
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e007      	b.n	8002f30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002f26:	2309      	movs	r3, #9
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	e001      	b.n	8002f30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002f2c:	2309      	movs	r3, #9
 8002f2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	029b      	lsls	r3, r3, #10
 8002f44:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	00d8acbf 	.word	0x00d8acbf
 8002f60:	00e4e1c0 	.word	0x00e4e1c0
 8002f64:	00f42400 	.word	0x00f42400
 8002f68:	01067380 	.word	0x01067380
 8002f6c:	011a499f 	.word	0x011a499f
 8002f70:	01312cff 	.word	0x01312cff
 8002f74:	014ca43f 	.word	0x014ca43f
 8002f78:	016e3600 	.word	0x016e3600
 8002f7c:	01a6ab1f 	.word	0x01a6ab1f
 8002f80:	01e84800 	.word	0x01e84800

08002f84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f043 0201 	orr.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 0201 	bic.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d115      	bne.n	8003016 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002ff6:	200a      	movs	r0, #10
 8002ff8:	f7fd fd68 	bl	8000acc <HAL_Delay>
      ms += 10U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	330a      	adds	r3, #10
 8003000:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f001 f93f 	bl	8004286 <USB_GetMode>
 8003008:	4603      	mov	r3, r0
 800300a:	2b01      	cmp	r3, #1
 800300c:	d01e      	beq.n	800304c <USB_SetCurrentMode+0x84>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2bc7      	cmp	r3, #199	@ 0xc7
 8003012:	d9f0      	bls.n	8002ff6 <USB_SetCurrentMode+0x2e>
 8003014:	e01a      	b.n	800304c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d115      	bne.n	8003048 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003028:	200a      	movs	r0, #10
 800302a:	f7fd fd4f 	bl	8000acc <HAL_Delay>
      ms += 10U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	330a      	adds	r3, #10
 8003032:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f001 f926 	bl	8004286 <USB_GetMode>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <USB_SetCurrentMode+0x84>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2bc7      	cmp	r3, #199	@ 0xc7
 8003044:	d9f0      	bls.n	8003028 <USB_SetCurrentMode+0x60>
 8003046:	e001      	b.n	800304c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e005      	b.n	8003058 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003050:	d101      	bne.n	8003056 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003060:	b084      	sub	sp, #16
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800306e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	e009      	b.n	8003094 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	3340      	adds	r3, #64	@ 0x40
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	2200      	movs	r2, #0
 800308c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	3301      	adds	r3, #1
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b0e      	cmp	r3, #14
 8003098:	d9f2      	bls.n	8003080 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800309a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11c      	bne.n	80030dc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80030da:	e00b      	b.n	80030f4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80030fa:	461a      	mov	r2, r3
 80030fc:	2300      	movs	r3, #0
 80030fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003100:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003104:	2b01      	cmp	r3, #1
 8003106:	d10d      	bne.n	8003124 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800310c:	2b00      	cmp	r3, #0
 800310e:	d104      	bne.n	800311a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003110:	2100      	movs	r1, #0
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f968 	bl	80033e8 <USB_SetDevSpeed>
 8003118:	e008      	b.n	800312c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800311a:	2101      	movs	r1, #1
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f963 	bl	80033e8 <USB_SetDevSpeed>
 8003122:	e003      	b.n	800312c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003124:	2103      	movs	r1, #3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f95e 	bl	80033e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800312c:	2110      	movs	r1, #16
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f8fa 	bl	8003328 <USB_FlushTxFifo>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f924 	bl	800338c <USB_FlushRxFifo>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003154:	461a      	mov	r2, r3
 8003156:	2300      	movs	r3, #0
 8003158:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003160:	461a      	mov	r2, r3
 8003162:	2300      	movs	r3, #0
 8003164:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800316c:	461a      	mov	r2, r3
 800316e:	2300      	movs	r3, #0
 8003170:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	e043      	b.n	8003200 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800318a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800318e:	d118      	bne.n	80031c2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031a2:	461a      	mov	r2, r3
 80031a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e013      	b.n	80031d4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031b8:	461a      	mov	r2, r3
 80031ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	e008      	b.n	80031d4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031ce:	461a      	mov	r2, r3
 80031d0:	2300      	movs	r3, #0
 80031d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031e0:	461a      	mov	r2, r3
 80031e2:	2300      	movs	r3, #0
 80031e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031f2:	461a      	mov	r2, r3
 80031f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80031f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3301      	adds	r3, #1
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003204:	461a      	mov	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4293      	cmp	r3, r2
 800320a:	d3b5      	bcc.n	8003178 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e043      	b.n	800329a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4413      	add	r3, r2
 800321a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003224:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003228:	d118      	bne.n	800325c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800323c:	461a      	mov	r2, r3
 800323e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	e013      	b.n	800326e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003252:	461a      	mov	r2, r3
 8003254:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e008      	b.n	800326e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003268:	461a      	mov	r2, r3
 800326a:	2300      	movs	r3, #0
 800326c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4413      	add	r3, r2
 8003276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800327a:	461a      	mov	r2, r3
 800327c:	2300      	movs	r3, #0
 800327e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800328c:	461a      	mov	r2, r3
 800328e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003292:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	3301      	adds	r3, #1
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800329e:	461a      	mov	r2, r3
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d3b5      	bcc.n	8003212 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80032c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80032c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d105      	bne.n	80032dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f043 0210 	orr.w	r2, r3, #16
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699a      	ldr	r2, [r3, #24]
 80032e0:	4b10      	ldr	r3, [pc, #64]	@ (8003324 <USB_DevInit+0x2c4>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80032e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f043 0208 	orr.w	r2, r3, #8
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80032fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003300:	2b01      	cmp	r3, #1
 8003302:	d107      	bne.n	8003314 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800330c:	f043 0304 	orr.w	r3, r3, #4
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003314:	7dfb      	ldrb	r3, [r7, #23]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003320:	b004      	add	sp, #16
 8003322:	4770      	bx	lr
 8003324:	803c3800 	.word	0x803c3800

08003328 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3301      	adds	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003342:	d901      	bls.n	8003348 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e01b      	b.n	8003380 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	daf2      	bge.n	8003336 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	019b      	lsls	r3, r3, #6
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3301      	adds	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800336c:	d901      	bls.n	8003372 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e006      	b.n	8003380 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b20      	cmp	r3, #32
 800337c:	d0f0      	beq.n	8003360 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3301      	adds	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80033a4:	d901      	bls.n	80033aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e018      	b.n	80033dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	daf2      	bge.n	8003398 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2210      	movs	r2, #16
 80033ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3301      	adds	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80033c8:	d901      	bls.n	80033ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e006      	b.n	80033dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d0f0      	beq.n	80033bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800341a:	b480      	push	{r7}
 800341c:	b087      	sub	sp, #28
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0306 	and.w	r3, r3, #6
 8003432:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d102      	bne.n	8003440 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]
 800343e:	e00a      	b.n	8003456 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d002      	beq.n	800344c <USB_GetDevSpeed+0x32>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b06      	cmp	r3, #6
 800344a:	d102      	bne.n	8003452 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800344c:	2302      	movs	r3, #2
 800344e:	75fb      	strb	r3, [r7, #23]
 8003450:	e001      	b.n	8003456 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003452:	230f      	movs	r3, #15
 8003454:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003456:	7dfb      	ldrb	r3, [r7, #23]
}
 8003458:	4618      	mov	r0, r3
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d13a      	bne.n	80034f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	2101      	movs	r1, #1
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	b29b      	uxth	r3, r3
 8003498:	68f9      	ldr	r1, [r7, #12]
 800349a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800349e:	4313      	orrs	r3, r2
 80034a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d155      	bne.n	8003564 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	791b      	ldrb	r3, [r3, #4]
 80034d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	059b      	lsls	r3, r3, #22
 80034da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034dc:	4313      	orrs	r3, r2
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	0151      	lsls	r1, r2, #5
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	440a      	add	r2, r1
 80034e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	e036      	b.n	8003564 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	041b      	lsls	r3, r3, #16
 800350e:	68f9      	ldr	r1, [r7, #12]
 8003510:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003514:	4313      	orrs	r3, r2
 8003516:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d11a      	bne.n	8003564 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	791b      	ldrb	r3, [r3, #4]
 8003548:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800354a:	430b      	orrs	r3, r1
 800354c:	4313      	orrs	r3, r2
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	0151      	lsls	r1, r2, #5
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	440a      	add	r2, r1
 8003556:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800355a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003562:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	785b      	ldrb	r3, [r3, #1]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d161      	bne.n	8003654 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035a6:	d11f      	bne.n	80035e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	0151      	lsls	r1, r2, #5
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	440a      	add	r2, r1
 80035be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80035c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	0151      	lsls	r1, r2, #5
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	440a      	add	r2, r1
 80035de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	2101      	movs	r1, #1
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	b29b      	uxth	r3, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003608:	4013      	ands	r3, r2
 800360a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	b29b      	uxth	r3, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	68f9      	ldr	r1, [r7, #12]
 8003628:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800362c:	4013      	ands	r3, r2
 800362e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	0159      	lsls	r1, r3, #5
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	440b      	add	r3, r1
 8003646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800364a:	4619      	mov	r1, r3
 800364c:	4b35      	ldr	r3, [pc, #212]	@ (8003724 <USB_DeactivateEndpoint+0x1b0>)
 800364e:	4013      	ands	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
 8003652:	e060      	b.n	8003716 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800366a:	d11f      	bne.n	80036ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	0151      	lsls	r1, r2, #5
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	440a      	add	r2, r1
 8003682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003686:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800368a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	0151      	lsls	r1, r2, #5
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	440a      	add	r2, r1
 80036a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	2101      	movs	r1, #1
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	43db      	mvns	r3, r3
 80036c6:	68f9      	ldr	r1, [r7, #12]
 80036c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036cc:	4013      	ands	r3, r2
 80036ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	2101      	movs	r1, #1
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	43db      	mvns	r3, r3
 80036ea:	68f9      	ldr	r1, [r7, #12]
 80036ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036f0:	4013      	ands	r3, r2
 80036f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	0159      	lsls	r1, r3, #5
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	440b      	add	r3, r1
 800370a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800370e:	4619      	mov	r1, r3
 8003710:	4b05      	ldr	r3, [pc, #20]	@ (8003728 <USB_DeactivateEndpoint+0x1b4>)
 8003712:	4013      	ands	r3, r2
 8003714:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	ec337800 	.word	0xec337800
 8003728:	eff37800 	.word	0xeff37800

0800372c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	@ 0x28
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	4613      	mov	r3, r2
 8003738:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	785b      	ldrb	r3, [r3, #1]
 8003748:	2b01      	cmp	r3, #1
 800374a:	f040 817f 	bne.w	8003a4c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d132      	bne.n	80037bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	0151      	lsls	r1, r2, #5
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	440a      	add	r2, r1
 800376c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003770:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003774:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	0151      	lsls	r1, r2, #5
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	440a      	add	r2, r1
 8003790:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003794:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	0151      	lsls	r1, r2, #5
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	440a      	add	r2, r1
 80037b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037b4:	0cdb      	lsrs	r3, r3, #19
 80037b6:	04db      	lsls	r3, r3, #19
 80037b8:	6113      	str	r3, [r2, #16]
 80037ba:	e097      	b.n	80038ec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	0151      	lsls	r1, r2, #5
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	440a      	add	r2, r1
 80037d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037d6:	0cdb      	lsrs	r3, r3, #19
 80037d8:	04db      	lsls	r3, r3, #19
 80037da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	0151      	lsls	r1, r2, #5
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	440a      	add	r2, r1
 80037f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80037fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80037fe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11a      	bne.n	800383c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	429a      	cmp	r2, r3
 8003810:	d903      	bls.n	800381a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	0151      	lsls	r1, r2, #5
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	440a      	add	r2, r1
 8003830:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003834:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003838:	6113      	str	r3, [r2, #16]
 800383a:	e044      	b.n	80038c6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4413      	add	r3, r2
 8003846:	1e5a      	subs	r2, r3, #1
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	8afb      	ldrh	r3, [r7, #22]
 8003862:	04d9      	lsls	r1, r3, #19
 8003864:	4ba4      	ldr	r3, [pc, #656]	@ (8003af8 <USB_EPStartXfer+0x3cc>)
 8003866:	400b      	ands	r3, r1
 8003868:	69b9      	ldr	r1, [r7, #24]
 800386a:	0148      	lsls	r0, r1, #5
 800386c:	69f9      	ldr	r1, [r7, #28]
 800386e:	4401      	add	r1, r0
 8003870:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003874:	4313      	orrs	r3, r2
 8003876:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	791b      	ldrb	r3, [r3, #4]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d122      	bne.n	80038c6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	0151      	lsls	r1, r2, #5
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	440a      	add	r2, r1
 8003896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800389a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800389e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	8afb      	ldrh	r3, [r7, #22]
 80038b0:	075b      	lsls	r3, r3, #29
 80038b2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80038b6:	69b9      	ldr	r1, [r7, #24]
 80038b8:	0148      	lsls	r0, r1, #5
 80038ba:	69f9      	ldr	r1, [r7, #28]
 80038bc:	4401      	add	r1, r0
 80038be:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80038c2:	4313      	orrs	r3, r2
 80038c4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038dc:	69b9      	ldr	r1, [r7, #24]
 80038de:	0148      	lsls	r0, r1, #5
 80038e0:	69f9      	ldr	r1, [r7, #28]
 80038e2:	4401      	add	r1, r0
 80038e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80038e8:	4313      	orrs	r3, r2
 80038ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d14b      	bne.n	800398a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003906:	461a      	mov	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	791b      	ldrb	r3, [r3, #4]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d128      	bne.n	8003968 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d110      	bne.n	8003948 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	0151      	lsls	r1, r2, #5
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	440a      	add	r2, r1
 800393c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003940:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e00f      	b.n	8003968 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	0151      	lsls	r1, r2, #5
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	440a      	add	r2, r1
 800395e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003966:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	0151      	lsls	r1, r2, #5
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	440a      	add	r2, r1
 800397e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003982:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e166      	b.n	8003c58 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80039a8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	791b      	ldrb	r3, [r3, #4]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d015      	beq.n	80039de <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 814e 	beq.w	8003c58 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	2101      	movs	r1, #1
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	69f9      	ldr	r1, [r7, #28]
 80039d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039d8:	4313      	orrs	r3, r2
 80039da:	634b      	str	r3, [r1, #52]	@ 0x34
 80039dc:	e13c      	b.n	8003c58 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d110      	bne.n	8003a10 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	0151      	lsls	r1, r2, #5
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	440a      	add	r2, r1
 8003a04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e00f      	b.n	8003a30 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	0151      	lsls	r1, r2, #5
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	440a      	add	r2, r1
 8003a26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a2e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	68d9      	ldr	r1, [r3, #12]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	b298      	uxth	r0, r3
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	4603      	mov	r3, r0
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f9b9 	bl	8003dbc <USB_WritePacket>
 8003a4a:	e105      	b.n	8003c58 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	0151      	lsls	r1, r2, #5
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	440a      	add	r2, r1
 8003a62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a66:	0cdb      	lsrs	r3, r3, #19
 8003a68:	04db      	lsls	r3, r3, #19
 8003a6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	0151      	lsls	r1, r2, #5
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	440a      	add	r2, r1
 8003a82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a86:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003a8a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003a8e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d132      	bne.n	8003afc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac4:	69b9      	ldr	r1, [r7, #24]
 8003ac6:	0148      	lsls	r0, r1, #5
 8003ac8:	69f9      	ldr	r1, [r7, #28]
 8003aca:	4401      	add	r1, r0
 8003acc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	0151      	lsls	r1, r2, #5
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	440a      	add	r2, r1
 8003aea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003aee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003af2:	6113      	str	r3, [r2, #16]
 8003af4:	e062      	b.n	8003bbc <USB_EPStartXfer+0x490>
 8003af6:	bf00      	nop
 8003af8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d123      	bne.n	8003b4c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1a:	69b9      	ldr	r1, [r7, #24]
 8003b1c:	0148      	lsls	r0, r1, #5
 8003b1e:	69f9      	ldr	r1, [r7, #28]
 8003b20:	4401      	add	r1, r0
 8003b22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b26:	4313      	orrs	r3, r2
 8003b28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	0151      	lsls	r1, r2, #5
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	440a      	add	r2, r1
 8003b40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003b48:	6113      	str	r3, [r2, #16]
 8003b4a:	e037      	b.n	8003bbc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	4413      	add	r3, r2
 8003b56:	1e5a      	subs	r2, r3, #1
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	8afa      	ldrh	r2, [r7, #22]
 8003b68:	fb03 f202 	mul.w	r2, r3, r2
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	8afb      	ldrh	r3, [r7, #22]
 8003b80:	04d9      	lsls	r1, r3, #19
 8003b82:	4b38      	ldr	r3, [pc, #224]	@ (8003c64 <USB_EPStartXfer+0x538>)
 8003b84:	400b      	ands	r3, r1
 8003b86:	69b9      	ldr	r1, [r7, #24]
 8003b88:	0148      	lsls	r0, r1, #5
 8003b8a:	69f9      	ldr	r1, [r7, #28]
 8003b8c:	4401      	add	r1, r0
 8003b8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b92:	4313      	orrs	r3, r2
 8003b94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bac:	69b9      	ldr	r1, [r7, #24]
 8003bae:	0148      	lsls	r0, r1, #5
 8003bb0:	69f9      	ldr	r1, [r7, #28]
 8003bb2:	4401      	add	r1, r0
 8003bb4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d10d      	bne.n	8003bde <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	68d9      	ldr	r1, [r3, #12]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bda:	460a      	mov	r2, r1
 8003bdc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	791b      	ldrb	r3, [r3, #4]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d128      	bne.n	8003c38 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d110      	bne.n	8003c18 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	0151      	lsls	r1, r2, #5
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	440a      	add	r2, r1
 8003c0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e00f      	b.n	8003c38 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	0151      	lsls	r1, r2, #5
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	0151      	lsls	r1, r2, #5
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c52:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003c56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	1ff80000 	.word	0x1ff80000

08003c68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	785b      	ldrb	r3, [r3, #1]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d14a      	bne.n	8003d1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c9e:	f040 8086 	bne.w	8003dae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	7812      	ldrb	r2, [r2, #0]
 8003cb6:	0151      	lsls	r1, r2, #5
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	440a      	add	r2, r1
 8003cbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003cc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	7812      	ldrb	r2, [r2, #0]
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ce4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ce8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3301      	adds	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d902      	bls.n	8003d00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
          break;
 8003cfe:	e056      	b.n	8003dae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d18:	d0e7      	beq.n	8003cea <USB_EPStopXfer+0x82>
 8003d1a:	e048      	b.n	8003dae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d34:	d13b      	bne.n	8003dae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	7812      	ldrb	r2, [r2, #0]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	7812      	ldrb	r2, [r2, #0]
 8003d6e:	0151      	lsls	r1, r2, #5
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	440a      	add	r2, r1
 8003d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3301      	adds	r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d902      	bls.n	8003d94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
          break;
 8003d92:	e00c      	b.n	8003dae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003da8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dac:	d0e7      	beq.n	8003d7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	@ 0x24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	461a      	mov	r2, r3
 8003dca:	460b      	mov	r3, r1
 8003dcc:	71fb      	strb	r3, [r7, #7]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003dda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d123      	bne.n	8003e2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003de2:	88bb      	ldrh	r3, [r7, #4]
 8003de4:	3303      	adds	r3, #3
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	e018      	b.n	8003e22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	031a      	lsls	r2, r3, #12
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	3301      	adds	r3, #1
 8003e08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	3301      	adds	r3, #1
 8003e14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d3e2      	bcc.n	8003df0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3724      	adds	r7, #36	@ 0x24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b08b      	sub	sp, #44	@ 0x2c
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003e5e:	2300      	movs	r3, #0
 8003e60:	623b      	str	r3, [r7, #32]
 8003e62:	e014      	b.n	8003e8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	3301      	adds	r3, #1
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	3301      	adds	r3, #1
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	3301      	adds	r3, #1
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	3301      	adds	r3, #1
 8003e86:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	623b      	str	r3, [r7, #32]
 8003e8e:	6a3a      	ldr	r2, [r7, #32]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d3e6      	bcc.n	8003e64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e96:	8bfb      	ldrh	r3, [r7, #30]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01e      	beq.n	8003eda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f107 0310 	add.w	r3, r7, #16
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	701a      	strb	r2, [r3, #0]
      i++;
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	623b      	str	r3, [r7, #32]
      pDest++;
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	3301      	adds	r3, #1
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003ece:	8bfb      	ldrh	r3, [r7, #30]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ed4:	8bfb      	ldrh	r3, [r7, #30]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1ea      	bne.n	8003eb0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	372c      	adds	r7, #44	@ 0x2c
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	785b      	ldrb	r3, [r3, #1]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d12c      	bne.n	8003f5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	db12      	blt.n	8003f3c <USB_EPSetStall+0x54>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00f      	beq.n	8003f3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	0151      	lsls	r1, r2, #5
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	440a      	add	r2, r1
 8003f52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	e02b      	b.n	8003fb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	db12      	blt.n	8003f96 <USB_EPSetStall+0xae>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00f      	beq.n	8003f96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	0151      	lsls	r1, r2, #5
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	440a      	add	r2, r1
 8003fac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003fb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	785b      	ldrb	r3, [r3, #1]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d128      	bne.n	8004032 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	0151      	lsls	r1, r2, #5
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ffa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ffe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	791b      	ldrb	r3, [r3, #4]
 8004004:	2b03      	cmp	r3, #3
 8004006:	d003      	beq.n	8004010 <USB_EPClearStall+0x4c>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	791b      	ldrb	r3, [r3, #4]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d138      	bne.n	8004082 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	0151      	lsls	r1, r2, #5
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	440a      	add	r2, r1
 8004026:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800402a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	e027      	b.n	8004082 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	0151      	lsls	r1, r2, #5
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	440a      	add	r2, r1
 8004048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800404c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004050:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	791b      	ldrb	r3, [r3, #4]
 8004056:	2b03      	cmp	r3, #3
 8004058:	d003      	beq.n	8004062 <USB_EPClearStall+0x9e>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	791b      	ldrb	r3, [r3, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d10f      	bne.n	8004082 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	0151      	lsls	r1, r2, #5
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	440a      	add	r2, r1
 8004078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800407c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004080:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80040b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80040c4:	68f9      	ldr	r1, [r7, #12]
 80040c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800410a:	f023 0302 	bic.w	r3, r3, #2
 800410e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004138:	f023 0303 	bic.w	r3, r3, #3
 800413c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800414c:	f043 0302 	orr.w	r3, r3, #2
 8004150:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4013      	ands	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004178:	68fb      	ldr	r3, [r7, #12]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	4013      	ands	r3, r2
 80041a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	0c1b      	lsrs	r3, r3, #16
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b085      	sub	sp, #20
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	4013      	ands	r3, r2
 80041dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	b29b      	uxth	r3, r3
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	460b      	mov	r3, r1
 80041f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	4013      	ands	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800421c:	68bb      	ldr	r3, [r7, #8]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800422a:	b480      	push	{r7}
 800422c:	b087      	sub	sp, #28
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800424a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	fa22 f303 	lsr.w	r3, r2, r3
 800425a:	01db      	lsls	r3, r3, #7
 800425c:	b2db      	uxtb	r3, r3
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4013      	ands	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004278:	68bb      	ldr	r3, [r7, #8]
}
 800427a:	4618      	mov	r0, r3
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0301 	and.w	r3, r3, #1
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80042c0:	f023 0307 	bic.w	r3, r3, #7
 80042c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	460b      	mov	r3, r1
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	333c      	adds	r3, #60	@ 0x3c
 80042fe:	3304      	adds	r3, #4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4a26      	ldr	r2, [pc, #152]	@ (80043a0 <USB_EP0_OutStart+0xb8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d90a      	bls.n	8004322 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004318:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800431c:	d101      	bne.n	8004322 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e037      	b.n	8004392 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004328:	461a      	mov	r2, r3
 800432a:	2300      	movs	r3, #0
 800432c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800433c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004340:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004350:	f043 0318 	orr.w	r3, r3, #24
 8004354:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004364:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004368:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800436a:	7afb      	ldrb	r3, [r7, #11]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d10f      	bne.n	8004390 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004376:	461a      	mov	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800438a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800438e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	4f54300a 	.word	0x4f54300a

080043a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3301      	adds	r3, #1
 80043b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043bc:	d901      	bls.n	80043c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e01b      	b.n	80043fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	daf2      	bge.n	80043b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f043 0201 	orr.w	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3301      	adds	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043e6:	d901      	bls.n	80043ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e006      	b.n	80043fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d0f0      	beq.n	80043da <USB_CoreReset+0x36>

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004414:	2010      	movs	r0, #16
 8004416:	f002 f921 	bl	800665c <USBD_static_malloc>
 800441a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	32b0      	adds	r2, #176	@ 0xb0
 800442c:	2100      	movs	r1, #0
 800442e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004432:	2302      	movs	r3, #2
 8004434:	e048      	b.n	80044c8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	32b0      	adds	r2, #176	@ 0xb0
 8004440:	68f9      	ldr	r1, [r7, #12]
 8004442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	32b0      	adds	r2, #176	@ 0xb0
 8004450:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	7c1b      	ldrb	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10d      	bne.n	800447e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004462:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <USBD_HID_Init+0xc8>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	f003 020f 	and.w	r2, r3, #15
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	3326      	adds	r3, #38	@ 0x26
 8004478:	2207      	movs	r2, #7
 800447a:	801a      	strh	r2, [r3, #0]
 800447c:	e00c      	b.n	8004498 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800447e:	4b14      	ldr	r3, [pc, #80]	@ (80044d0 <USBD_HID_Init+0xc8>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	f003 020f 	and.w	r2, r3, #15
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	3326      	adds	r3, #38	@ 0x26
 8004494:	220a      	movs	r2, #10
 8004496:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004498:	4b0d      	ldr	r3, [pc, #52]	@ (80044d0 <USBD_HID_Init+0xc8>)
 800449a:	7819      	ldrb	r1, [r3, #0]
 800449c:	2304      	movs	r3, #4
 800449e:	2203      	movs	r2, #3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f001 ffca 	bl	800643a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80044a6:	4b0a      	ldr	r3, [pc, #40]	@ (80044d0 <USBD_HID_Init+0xc8>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	f003 020f 	and.w	r2, r3, #15
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	3324      	adds	r3, #36	@ 0x24
 80044bc:	2201      	movs	r2, #1
 80044be:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	200000bf 	.word	0x200000bf

080044d4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80044e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004560 <USBD_HID_DeInit+0x8c>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	4619      	mov	r1, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f001 ffcd 	bl	8006486 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80044ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004560 <USBD_HID_DeInit+0x8c>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	f003 020f 	and.w	r2, r3, #15
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	3324      	adds	r3, #36	@ 0x24
 8004502:	2200      	movs	r2, #0
 8004504:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004506:	4b16      	ldr	r3, [pc, #88]	@ (8004560 <USBD_HID_DeInit+0x8c>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	f003 020f 	and.w	r2, r3, #15
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	3326      	adds	r3, #38	@ 0x26
 800451c:	2200      	movs	r2, #0
 800451e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	32b0      	adds	r2, #176	@ 0xb0
 800452a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d011      	beq.n	8004556 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	32b0      	adds	r2, #176	@ 0xb0
 800453c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004540:	4618      	mov	r0, r3
 8004542:	f002 f899 	bl	8006678 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	32b0      	adds	r2, #176	@ 0xb0
 8004550:	2100      	movs	r1, #0
 8004552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	200000bf 	.word	0x200000bf

08004564 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	32b0      	adds	r2, #176	@ 0xb0
 8004578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800458c:	2303      	movs	r3, #3
 800458e:	e0e8      	b.n	8004762 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004598:	2b00      	cmp	r3, #0
 800459a:	d046      	beq.n	800462a <USBD_HID_Setup+0xc6>
 800459c:	2b20      	cmp	r3, #32
 800459e:	f040 80d8 	bne.w	8004752 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	3b02      	subs	r3, #2
 80045a8:	2b09      	cmp	r3, #9
 80045aa:	d836      	bhi.n	800461a <USBD_HID_Setup+0xb6>
 80045ac:	a201      	add	r2, pc, #4	@ (adr r2, 80045b4 <USBD_HID_Setup+0x50>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	0800460b 	.word	0x0800460b
 80045b8:	080045eb 	.word	0x080045eb
 80045bc:	0800461b 	.word	0x0800461b
 80045c0:	0800461b 	.word	0x0800461b
 80045c4:	0800461b 	.word	0x0800461b
 80045c8:	0800461b 	.word	0x0800461b
 80045cc:	0800461b 	.word	0x0800461b
 80045d0:	0800461b 	.word	0x0800461b
 80045d4:	080045f9 	.word	0x080045f9
 80045d8:	080045dd 	.word	0x080045dd
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	885b      	ldrh	r3, [r3, #2]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	601a      	str	r2, [r3, #0]
          break;
 80045e8:	e01e      	b.n	8004628 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	4619      	mov	r1, r3
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f001 fbe5 	bl	8005dc0 <USBD_CtlSendData>
          break;
 80045f6:	e017      	b.n	8004628 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	885b      	ldrh	r3, [r3, #2]
 80045fc:	0a1b      	lsrs	r3, r3, #8
 80045fe:	b29b      	uxth	r3, r3
 8004600:	b2db      	uxtb	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	605a      	str	r2, [r3, #4]
          break;
 8004608:	e00e      	b.n	8004628 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3304      	adds	r3, #4
 800460e:	2201      	movs	r2, #1
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f001 fbd4 	bl	8005dc0 <USBD_CtlSendData>
          break;
 8004618:	e006      	b.n	8004628 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800461a:	6839      	ldr	r1, [r7, #0]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f001 fb52 	bl	8005cc6 <USBD_CtlError>
          ret = USBD_FAIL;
 8004622:	2303      	movs	r3, #3
 8004624:	75fb      	strb	r3, [r7, #23]
          break;
 8004626:	bf00      	nop
      }
      break;
 8004628:	e09a      	b.n	8004760 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	785b      	ldrb	r3, [r3, #1]
 800462e:	2b0b      	cmp	r3, #11
 8004630:	f200 8086 	bhi.w	8004740 <USBD_HID_Setup+0x1dc>
 8004634:	a201      	add	r2, pc, #4	@ (adr r2, 800463c <USBD_HID_Setup+0xd8>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	0800466d 	.word	0x0800466d
 8004640:	0800474f 	.word	0x0800474f
 8004644:	08004741 	.word	0x08004741
 8004648:	08004741 	.word	0x08004741
 800464c:	08004741 	.word	0x08004741
 8004650:	08004741 	.word	0x08004741
 8004654:	08004697 	.word	0x08004697
 8004658:	08004741 	.word	0x08004741
 800465c:	08004741 	.word	0x08004741
 8004660:	08004741 	.word	0x08004741
 8004664:	080046ef 	.word	0x080046ef
 8004668:	08004719 	.word	0x08004719
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b03      	cmp	r3, #3
 8004676:	d107      	bne.n	8004688 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004678:	f107 030a 	add.w	r3, r7, #10
 800467c:	2202      	movs	r2, #2
 800467e:	4619      	mov	r1, r3
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f001 fb9d 	bl	8005dc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004686:	e063      	b.n	8004750 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f001 fb1b 	bl	8005cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004690:	2303      	movs	r3, #3
 8004692:	75fb      	strb	r3, [r7, #23]
          break;
 8004694:	e05c      	b.n	8004750 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	885b      	ldrh	r3, [r3, #2]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b22      	cmp	r3, #34	@ 0x22
 80046a0:	d108      	bne.n	80046b4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	88db      	ldrh	r3, [r3, #6]
 80046a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80046a8:	bf28      	it	cs
 80046aa:	233f      	movcs	r3, #63	@ 0x3f
 80046ac:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80046ae:	4b2f      	ldr	r3, [pc, #188]	@ (800476c <USBD_HID_Setup+0x208>)
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	e015      	b.n	80046e0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	885b      	ldrh	r3, [r3, #2]
 80046b8:	0a1b      	lsrs	r3, r3, #8
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b21      	cmp	r3, #33	@ 0x21
 80046be:	d108      	bne.n	80046d2 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80046c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004770 <USBD_HID_Setup+0x20c>)
 80046c2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	88db      	ldrh	r3, [r3, #6]
 80046c8:	2b09      	cmp	r3, #9
 80046ca:	bf28      	it	cs
 80046cc:	2309      	movcs	r3, #9
 80046ce:	82bb      	strh	r3, [r7, #20]
 80046d0:	e006      	b.n	80046e0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80046d2:	6839      	ldr	r1, [r7, #0]
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f001 faf6 	bl	8005cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 80046da:	2303      	movs	r3, #3
 80046dc:	75fb      	strb	r3, [r7, #23]
            break;
 80046de:	e037      	b.n	8004750 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80046e0:	8abb      	ldrh	r3, [r7, #20]
 80046e2:	461a      	mov	r2, r3
 80046e4:	6939      	ldr	r1, [r7, #16]
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f001 fb6a 	bl	8005dc0 <USBD_CtlSendData>
          break;
 80046ec:	e030      	b.n	8004750 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d107      	bne.n	800470a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3308      	adds	r3, #8
 80046fe:	2201      	movs	r2, #1
 8004700:	4619      	mov	r1, r3
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f001 fb5c 	bl	8005dc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004708:	e022      	b.n	8004750 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800470a:	6839      	ldr	r1, [r7, #0]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f001 fada 	bl	8005cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004712:	2303      	movs	r3, #3
 8004714:	75fb      	strb	r3, [r7, #23]
          break;
 8004716:	e01b      	b.n	8004750 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b03      	cmp	r3, #3
 8004722:	d106      	bne.n	8004732 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	885b      	ldrh	r3, [r3, #2]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004730:	e00e      	b.n	8004750 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f001 fac6 	bl	8005cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800473a:	2303      	movs	r3, #3
 800473c:	75fb      	strb	r3, [r7, #23]
          break;
 800473e:	e007      	b.n	8004750 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f001 fabf 	bl	8005cc6 <USBD_CtlError>
          ret = USBD_FAIL;
 8004748:	2303      	movs	r3, #3
 800474a:	75fb      	strb	r3, [r7, #23]
          break;
 800474c:	e000      	b.n	8004750 <USBD_HID_Setup+0x1ec>
          break;
 800474e:	bf00      	nop
      }
      break;
 8004750:	e006      	b.n	8004760 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f001 fab6 	bl	8005cc6 <USBD_CtlError>
      ret = USBD_FAIL;
 800475a:	2303      	movs	r3, #3
 800475c:	75fb      	strb	r3, [r7, #23]
      break;
 800475e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004760:	7dfb      	ldrb	r3, [r7, #23]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000080 	.word	0x20000080
 8004770:	20000068 	.word	0x20000068

08004774 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	32b0      	adds	r2, #176	@ 0xb0
 800478c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004790:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004798:	2303      	movs	r3, #3
 800479a:	e014      	b.n	80047c6 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d10d      	bne.n	80047c4 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	7b1b      	ldrb	r3, [r3, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2201      	movs	r2, #1
 80047b4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80047b6:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <USBD_HID_SendReport+0x5c>)
 80047b8:	7819      	ldrb	r1, [r3, #0]
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f001 ff09 	bl	80065d6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	200000bf 	.word	0x200000bf

080047d4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80047dc:	2181      	movs	r1, #129	@ 0x81
 80047de:	4809      	ldr	r0, [pc, #36]	@ (8004804 <USBD_HID_GetFSCfgDesc+0x30>)
 80047e0:	f000 fc3b 	bl	800505a <USBD_GetEpDesc>
 80047e4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	220a      	movs	r2, #10
 80047f0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2222      	movs	r2, #34	@ 0x22
 80047f6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80047f8:	4b02      	ldr	r3, [pc, #8]	@ (8004804 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000044 	.word	0x20000044

08004808 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8004810:	2181      	movs	r1, #129	@ 0x81
 8004812:	4809      	ldr	r0, [pc, #36]	@ (8004838 <USBD_HID_GetHSCfgDesc+0x30>)
 8004814:	f000 fc21 	bl	800505a <USBD_GetEpDesc>
 8004818:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2207      	movs	r2, #7
 8004824:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2222      	movs	r2, #34	@ 0x22
 800482a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800482c:	4b02      	ldr	r3, [pc, #8]	@ (8004838 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000044 	.word	0x20000044

0800483c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8004844:	2181      	movs	r1, #129	@ 0x81
 8004846:	4809      	ldr	r0, [pc, #36]	@ (800486c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8004848:	f000 fc07 	bl	800505a <USBD_GetEpDesc>
 800484c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	220a      	movs	r2, #10
 8004858:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2222      	movs	r2, #34	@ 0x22
 800485e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004860:	4b02      	ldr	r3, [pc, #8]	@ (800486c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000044 	.word	0x20000044

08004870 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	32b0      	adds	r2, #176	@ 0xb0
 8004886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800488a:	2200      	movs	r2, #0
 800488c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	220a      	movs	r2, #10
 80048a8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80048aa:	4b03      	ldr	r3, [pc, #12]	@ (80048b8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	20000074 	.word	0x20000074

080048bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	4613      	mov	r3, r2
 80048c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e01f      	b.n	8004914 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	79fa      	ldrb	r2, [r7, #7]
 8004906:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f001 fd2f 	bl	800636c <USBD_LL_Init>
 800490e:	4603      	mov	r3, r0
 8004910:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004912:	7dfb      	ldrb	r3, [r7, #23]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004930:	2303      	movs	r3, #3
 8004932:	e025      	b.n	8004980 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	32ae      	adds	r2, #174	@ 0xae
 8004946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800494a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00f      	beq.n	8004970 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	32ae      	adds	r2, #174	@ 0xae
 800495a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004960:	f107 020e 	add.w	r2, r7, #14
 8004964:	4610      	mov	r0, r2
 8004966:	4798      	blx	r3
 8004968:	4602      	mov	r2, r0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f001 fd37 	bl	8006404 <USBD_LL_Start>
 8004996:	4603      	mov	r3, r0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80049a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	78fa      	ldrb	r2, [r7, #3]
 80049da:	4611      	mov	r1, r2
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4798      	blx	r3
 80049e0:	4603      	mov	r3, r0
 80049e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	460b      	mov	r3, r1
 80049f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	4611      	mov	r1, r2
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004a14:	2303      	movs	r3, #3
 8004a16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f001 f90c 	bl	8005c52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004a48:	461a      	mov	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d01a      	beq.n	8004a94 <USBD_LL_SetupStage+0x72>
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d822      	bhi.n	8004aa8 <USBD_LL_SetupStage+0x86>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <USBD_LL_SetupStage+0x4a>
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d00a      	beq.n	8004a80 <USBD_LL_SetupStage+0x5e>
 8004a6a:	e01d      	b.n	8004aa8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a72:	4619      	mov	r1, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fb63 	bl	8005140 <USBD_StdDevReq>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a7e:	e020      	b.n	8004ac2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a86:	4619      	mov	r1, r3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fbcb 	bl	8005224 <USBD_StdItfReq>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	73fb      	strb	r3, [r7, #15]
      break;
 8004a92:	e016      	b.n	8004ac2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fc2d 	bl	80052fc <USBD_StdEPReq>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa6:	e00c      	b.n	8004ac2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004aae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f001 fd04 	bl	80064c4 <USBD_LL_StallEP>
 8004abc:	4603      	mov	r3, r0
 8004abe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac0:	bf00      	nop
  }

  return ret;
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004ade:	7afb      	ldrb	r3, [r7, #11]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d16e      	bne.n	8004bc2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004aea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	f040 8098 	bne.w	8004c28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d913      	bls.n	8004b2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	1ad2      	subs	r2, r2, r3
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	bf28      	it	cs
 8004b1e:	4613      	movcs	r3, r2
 8004b20:	461a      	mov	r2, r3
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f001 f977 	bl	8005e18 <USBD_CtlContinueRx>
 8004b2a:	e07d      	b.n	8004c28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d014      	beq.n	8004b64 <USBD_LL_DataOutStage+0x98>
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d81d      	bhi.n	8004b7a <USBD_LL_DataOutStage+0xae>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <USBD_LL_DataOutStage+0x7c>
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d003      	beq.n	8004b4e <USBD_LL_DataOutStage+0x82>
 8004b46:	e018      	b.n	8004b7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	75bb      	strb	r3, [r7, #22]
            break;
 8004b4c:	e018      	b.n	8004b80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	4619      	mov	r1, r3
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fa64 	bl	8005026 <USBD_CoreFindIF>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	75bb      	strb	r3, [r7, #22]
            break;
 8004b62:	e00d      	b.n	8004b80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fa66 	bl	8005040 <USBD_CoreFindEP>
 8004b74:	4603      	mov	r3, r0
 8004b76:	75bb      	strb	r3, [r7, #22]
            break;
 8004b78:	e002      	b.n	8004b80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	75bb      	strb	r3, [r7, #22]
            break;
 8004b7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004b80:	7dbb      	ldrb	r3, [r7, #22]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d119      	bne.n	8004bba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d113      	bne.n	8004bba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004b92:	7dba      	ldrb	r2, [r7, #22]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	32ae      	adds	r2, #174	@ 0xae
 8004b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004ba2:	7dba      	ldrb	r2, [r7, #22]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004baa:	7dba      	ldrb	r2, [r7, #22]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	32ae      	adds	r2, #174	@ 0xae
 8004bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f001 f93d 	bl	8005e3a <USBD_CtlSendStatus>
 8004bc0:	e032      	b.n	8004c28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004bc2:	7afb      	ldrb	r3, [r7, #11]
 8004bc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	4619      	mov	r1, r3
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 fa37 	bl	8005040 <USBD_CoreFindEP>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004bd6:	7dbb      	ldrb	r3, [r7, #22]
 8004bd8:	2bff      	cmp	r3, #255	@ 0xff
 8004bda:	d025      	beq.n	8004c28 <USBD_LL_DataOutStage+0x15c>
 8004bdc:	7dbb      	ldrb	r3, [r7, #22]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d122      	bne.n	8004c28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d117      	bne.n	8004c1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004bee:	7dba      	ldrb	r2, [r7, #22]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	32ae      	adds	r2, #174	@ 0xae
 8004bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00f      	beq.n	8004c1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004bfe:	7dba      	ldrb	r2, [r7, #22]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004c06:	7dba      	ldrb	r2, [r7, #22]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	32ae      	adds	r2, #174	@ 0xae
 8004c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	7afa      	ldrb	r2, [r7, #11]
 8004c14:	4611      	mov	r1, r2
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	4798      	blx	r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	e000      	b.n	8004c2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b086      	sub	sp, #24
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004c40:	7afb      	ldrb	r3, [r7, #11]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d16f      	bne.n	8004d26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3314      	adds	r3, #20
 8004c4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d15a      	bne.n	8004d0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d914      	bls.n	8004c8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	1ad2      	subs	r2, r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	461a      	mov	r2, r3
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f001 f8bc 	bl	8005df6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c7e:	2300      	movs	r3, #0
 8004c80:	2200      	movs	r2, #0
 8004c82:	2100      	movs	r1, #0
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f001 fcc7 	bl	8006618 <USBD_LL_PrepareReceive>
 8004c8a:	e03f      	b.n	8004d0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d11c      	bne.n	8004cd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d316      	bcc.n	8004cd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d20f      	bcs.n	8004cd2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f001 f89d 	bl	8005df6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2100      	movs	r1, #0
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f001 fca4 	bl	8006618 <USBD_LL_PrepareReceive>
 8004cd0:	e01c      	b.n	8004d0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d10f      	bne.n	8004cfe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cfe:	2180      	movs	r1, #128	@ 0x80
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f001 fbdf 	bl	80064c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f001 f8aa 	bl	8005e60 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d03a      	beq.n	8004d8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f7ff fe42 	bl	80049a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004d24:	e032      	b.n	8004d8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004d26:	7afb      	ldrb	r3, [r7, #11]
 8004d28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	4619      	mov	r1, r3
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f985 	bl	8005040 <USBD_CoreFindEP>
 8004d36:	4603      	mov	r3, r0
 8004d38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004d3a:	7dfb      	ldrb	r3, [r7, #23]
 8004d3c:	2bff      	cmp	r3, #255	@ 0xff
 8004d3e:	d025      	beq.n	8004d8c <USBD_LL_DataInStage+0x15a>
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d122      	bne.n	8004d8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d11c      	bne.n	8004d8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004d52:	7dfa      	ldrb	r2, [r7, #23]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	32ae      	adds	r2, #174	@ 0xae
 8004d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d014      	beq.n	8004d8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004d62:	7dfa      	ldrb	r2, [r7, #23]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004d6a:	7dfa      	ldrb	r2, [r7, #23]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	32ae      	adds	r2, #174	@ 0xae
 8004d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	7afa      	ldrb	r2, [r7, #11]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	4798      	blx	r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004d82:	7dbb      	ldrb	r3, [r7, #22]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004d88:	7dbb      	ldrb	r3, [r7, #22]
 8004d8a:	e000      	b.n	8004d8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d014      	beq.n	8004dfc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00e      	beq.n	8004dfc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6852      	ldr	r2, [r2, #4]
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	4611      	mov	r1, r2
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	4798      	blx	r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004dfc:	2340      	movs	r3, #64	@ 0x40
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2100      	movs	r1, #0
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f001 fb19 	bl	800643a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2240      	movs	r2, #64	@ 0x40
 8004e14:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e18:	2340      	movs	r3, #64	@ 0x40
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2180      	movs	r1, #128	@ 0x80
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f001 fb0b 	bl	800643a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2240      	movs	r2, #64	@ 0x40
 8004e2e:	621a      	str	r2, [r3, #32]

  return ret;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	460b      	mov	r3, r1
 8004e44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	78fa      	ldrb	r2, [r7, #3]
 8004e4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d006      	beq.n	8004e7c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2204      	movs	r2, #4
 8004e80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d106      	bne.n	8004eb4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d110      	bne.n	8004ef8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00b      	beq.n	8004ef8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	32ae      	adds	r2, #174	@ 0xae
 8004f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e01c      	b.n	8004f5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d115      	bne.n	8004f5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	32ae      	adds	r2, #174	@ 0xae
 8004f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	32ae      	adds	r2, #174	@ 0xae
 8004f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	4611      	mov	r1, r2
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b082      	sub	sp, #8
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	32ae      	adds	r2, #174	@ 0xae
 8004f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e01c      	b.n	8004fc2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d115      	bne.n	8004fc0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	32ae      	adds	r2, #174	@ 0xae
 8004f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00b      	beq.n	8004fc0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	32ae      	adds	r2, #174	@ 0xae
 8004fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	78fa      	ldrb	r2, [r7, #3]
 8004fba:	4611      	mov	r1, r2
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00e      	beq.n	800501c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6852      	ldr	r2, [r2, #4]
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	4611      	mov	r1, r2
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005018:	2303      	movs	r3, #3
 800501a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800501c:	7bfb      	ldrb	r3, [r7, #15]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005032:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005034:	4618      	mov	r0, r3
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800504c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b086      	sub	sp, #24
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	460b      	mov	r3, r1
 8005064:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	885b      	ldrh	r3, [r3, #2]
 8005076:	b29b      	uxth	r3, r3
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	7812      	ldrb	r2, [r2, #0]
 800507c:	4293      	cmp	r3, r2
 800507e:	d91f      	bls.n	80050c0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005086:	e013      	b.n	80050b0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005088:	f107 030a 	add.w	r3, r7, #10
 800508c:	4619      	mov	r1, r3
 800508e:	6978      	ldr	r0, [r7, #20]
 8005090:	f000 f81b 	bl	80050ca <USBD_GetNextDesc>
 8005094:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	785b      	ldrb	r3, [r3, #1]
 800509a:	2b05      	cmp	r3, #5
 800509c:	d108      	bne.n	80050b0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	789b      	ldrb	r3, [r3, #2]
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d008      	beq.n	80050be <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	885b      	ldrh	r3, [r3, #2]
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	897b      	ldrh	r3, [r7, #10]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d8e5      	bhi.n	8005088 <USBD_GetEpDesc+0x2e>
 80050bc:	e000      	b.n	80050c0 <USBD_GetEpDesc+0x66>
          break;
 80050be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80050c0:	693b      	ldr	r3, [r7, #16]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	7812      	ldrb	r2, [r2, #0]
 80050e0:	4413      	add	r3, r2
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80050f4:	68fb      	ldr	r3, [r7, #12]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005102:	b480      	push	{r7}
 8005104:	b087      	sub	sp, #28
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	3301      	adds	r3, #1
 8005118:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005120:	8a3b      	ldrh	r3, [r7, #16]
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	b21a      	sxth	r2, r3
 8005126:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800512a:	4313      	orrs	r3, r2
 800512c:	b21b      	sxth	r3, r3
 800512e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005130:	89fb      	ldrh	r3, [r7, #14]
}
 8005132:	4618      	mov	r0, r3
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005156:	2b40      	cmp	r3, #64	@ 0x40
 8005158:	d005      	beq.n	8005166 <USBD_StdDevReq+0x26>
 800515a:	2b40      	cmp	r3, #64	@ 0x40
 800515c:	d857      	bhi.n	800520e <USBD_StdDevReq+0xce>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00f      	beq.n	8005182 <USBD_StdDevReq+0x42>
 8005162:	2b20      	cmp	r3, #32
 8005164:	d153      	bne.n	800520e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	32ae      	adds	r2, #174	@ 0xae
 8005170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	6839      	ldr	r1, [r7, #0]
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	4798      	blx	r3
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]
      break;
 8005180:	e04a      	b.n	8005218 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	785b      	ldrb	r3, [r3, #1]
 8005186:	2b09      	cmp	r3, #9
 8005188:	d83b      	bhi.n	8005202 <USBD_StdDevReq+0xc2>
 800518a:	a201      	add	r2, pc, #4	@ (adr r2, 8005190 <USBD_StdDevReq+0x50>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051e5 	.word	0x080051e5
 8005194:	080051f9 	.word	0x080051f9
 8005198:	08005203 	.word	0x08005203
 800519c:	080051ef 	.word	0x080051ef
 80051a0:	08005203 	.word	0x08005203
 80051a4:	080051c3 	.word	0x080051c3
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	08005203 	.word	0x08005203
 80051b0:	080051db 	.word	0x080051db
 80051b4:	080051cd 	.word	0x080051cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fa3c 	bl	8005638 <USBD_GetDescriptor>
          break;
 80051c0:	e024      	b.n	800520c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80051c2:	6839      	ldr	r1, [r7, #0]
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fba1 	bl	800590c <USBD_SetAddress>
          break;
 80051ca:	e01f      	b.n	800520c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fbe0 	bl	8005994 <USBD_SetConfig>
 80051d4:	4603      	mov	r3, r0
 80051d6:	73fb      	strb	r3, [r7, #15]
          break;
 80051d8:	e018      	b.n	800520c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fc83 	bl	8005ae8 <USBD_GetConfig>
          break;
 80051e2:	e013      	b.n	800520c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80051e4:	6839      	ldr	r1, [r7, #0]
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fcb4 	bl	8005b54 <USBD_GetStatus>
          break;
 80051ec:	e00e      	b.n	800520c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80051ee:	6839      	ldr	r1, [r7, #0]
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fce3 	bl	8005bbc <USBD_SetFeature>
          break;
 80051f6:	e009      	b.n	800520c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fd07 	bl	8005c0e <USBD_ClrFeature>
          break;
 8005200:	e004      	b.n	800520c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005202:	6839      	ldr	r1, [r7, #0]
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fd5e 	bl	8005cc6 <USBD_CtlError>
          break;
 800520a:	bf00      	nop
      }
      break;
 800520c:	e004      	b.n	8005218 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fd58 	bl	8005cc6 <USBD_CtlError>
      break;
 8005216:	bf00      	nop
  }

  return ret;
 8005218:	7bfb      	ldrb	r3, [r7, #15]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop

08005224 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800523a:	2b40      	cmp	r3, #64	@ 0x40
 800523c:	d005      	beq.n	800524a <USBD_StdItfReq+0x26>
 800523e:	2b40      	cmp	r3, #64	@ 0x40
 8005240:	d852      	bhi.n	80052e8 <USBD_StdItfReq+0xc4>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <USBD_StdItfReq+0x26>
 8005246:	2b20      	cmp	r3, #32
 8005248:	d14e      	bne.n	80052e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005250:	b2db      	uxtb	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	2b02      	cmp	r3, #2
 8005256:	d840      	bhi.n	80052da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	889b      	ldrh	r3, [r3, #4]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b01      	cmp	r3, #1
 8005260:	d836      	bhi.n	80052d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	889b      	ldrh	r3, [r3, #4]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	4619      	mov	r1, r3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff fedb 	bl	8005026 <USBD_CoreFindIF>
 8005270:	4603      	mov	r3, r0
 8005272:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005274:	7bbb      	ldrb	r3, [r7, #14]
 8005276:	2bff      	cmp	r3, #255	@ 0xff
 8005278:	d01d      	beq.n	80052b6 <USBD_StdItfReq+0x92>
 800527a:	7bbb      	ldrb	r3, [r7, #14]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d11a      	bne.n	80052b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005280:	7bba      	ldrb	r2, [r7, #14]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	32ae      	adds	r2, #174	@ 0xae
 8005286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00f      	beq.n	80052b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005290:	7bba      	ldrb	r2, [r7, #14]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005298:	7bba      	ldrb	r2, [r7, #14]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	32ae      	adds	r2, #174	@ 0xae
 800529e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
 80052aa:	4603      	mov	r3, r0
 80052ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80052ae:	e004      	b.n	80052ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80052b0:	2303      	movs	r3, #3
 80052b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80052b4:	e001      	b.n	80052ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80052b6:	2303      	movs	r3, #3
 80052b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	88db      	ldrh	r3, [r3, #6]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d110      	bne.n	80052e4 <USBD_StdItfReq+0xc0>
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10d      	bne.n	80052e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fdb6 	bl	8005e3a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80052ce:	e009      	b.n	80052e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fcf7 	bl	8005cc6 <USBD_CtlError>
          break;
 80052d8:	e004      	b.n	80052e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fcf2 	bl	8005cc6 <USBD_CtlError>
          break;
 80052e2:	e000      	b.n	80052e6 <USBD_StdItfReq+0xc2>
          break;
 80052e4:	bf00      	nop
      }
      break;
 80052e6:	e004      	b.n	80052f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fceb 	bl	8005cc6 <USBD_CtlError>
      break;
 80052f0:	bf00      	nop
  }

  return ret;
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	889b      	ldrh	r3, [r3, #4]
 800530e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005318:	2b40      	cmp	r3, #64	@ 0x40
 800531a:	d007      	beq.n	800532c <USBD_StdEPReq+0x30>
 800531c:	2b40      	cmp	r3, #64	@ 0x40
 800531e:	f200 817f 	bhi.w	8005620 <USBD_StdEPReq+0x324>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d02a      	beq.n	800537c <USBD_StdEPReq+0x80>
 8005326:	2b20      	cmp	r3, #32
 8005328:	f040 817a 	bne.w	8005620 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800532c:	7bbb      	ldrb	r3, [r7, #14]
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff fe85 	bl	8005040 <USBD_CoreFindEP>
 8005336:	4603      	mov	r3, r0
 8005338:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800533a:	7b7b      	ldrb	r3, [r7, #13]
 800533c:	2bff      	cmp	r3, #255	@ 0xff
 800533e:	f000 8174 	beq.w	800562a <USBD_StdEPReq+0x32e>
 8005342:	7b7b      	ldrb	r3, [r7, #13]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f040 8170 	bne.w	800562a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800534a:	7b7a      	ldrb	r2, [r7, #13]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005352:	7b7a      	ldrb	r2, [r7, #13]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	32ae      	adds	r2, #174	@ 0xae
 8005358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8163 	beq.w	800562a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005364:	7b7a      	ldrb	r2, [r7, #13]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	32ae      	adds	r2, #174	@ 0xae
 800536a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	4798      	blx	r3
 8005376:	4603      	mov	r3, r0
 8005378:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800537a:	e156      	b.n	800562a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b03      	cmp	r3, #3
 8005382:	d008      	beq.n	8005396 <USBD_StdEPReq+0x9a>
 8005384:	2b03      	cmp	r3, #3
 8005386:	f300 8145 	bgt.w	8005614 <USBD_StdEPReq+0x318>
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 809b 	beq.w	80054c6 <USBD_StdEPReq+0x1ca>
 8005390:	2b01      	cmp	r3, #1
 8005392:	d03c      	beq.n	800540e <USBD_StdEPReq+0x112>
 8005394:	e13e      	b.n	8005614 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d002      	beq.n	80053a8 <USBD_StdEPReq+0xac>
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d016      	beq.n	80053d4 <USBD_StdEPReq+0xd8>
 80053a6:	e02c      	b.n	8005402 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053a8:	7bbb      	ldrb	r3, [r7, #14]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00d      	beq.n	80053ca <USBD_StdEPReq+0xce>
 80053ae:	7bbb      	ldrb	r3, [r7, #14]
 80053b0:	2b80      	cmp	r3, #128	@ 0x80
 80053b2:	d00a      	beq.n	80053ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80053b4:	7bbb      	ldrb	r3, [r7, #14]
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f001 f883 	bl	80064c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80053be:	2180      	movs	r1, #128	@ 0x80
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 f87f 	bl	80064c4 <USBD_LL_StallEP>
 80053c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80053c8:	e020      	b.n	800540c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80053ca:	6839      	ldr	r1, [r7, #0]
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fc7a 	bl	8005cc6 <USBD_CtlError>
              break;
 80053d2:	e01b      	b.n	800540c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	885b      	ldrh	r3, [r3, #2]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10e      	bne.n	80053fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80053dc:	7bbb      	ldrb	r3, [r7, #14]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <USBD_StdEPReq+0xfe>
 80053e2:	7bbb      	ldrb	r3, [r7, #14]
 80053e4:	2b80      	cmp	r3, #128	@ 0x80
 80053e6:	d008      	beq.n	80053fa <USBD_StdEPReq+0xfe>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	88db      	ldrh	r3, [r3, #6]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d104      	bne.n	80053fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80053f0:	7bbb      	ldrb	r3, [r7, #14]
 80053f2:	4619      	mov	r1, r3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f001 f865 	bl	80064c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fd1d 	bl	8005e3a <USBD_CtlSendStatus>

              break;
 8005400:	e004      	b.n	800540c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fc5e 	bl	8005cc6 <USBD_CtlError>
              break;
 800540a:	bf00      	nop
          }
          break;
 800540c:	e107      	b.n	800561e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d002      	beq.n	8005420 <USBD_StdEPReq+0x124>
 800541a:	2b03      	cmp	r3, #3
 800541c:	d016      	beq.n	800544c <USBD_StdEPReq+0x150>
 800541e:	e04b      	b.n	80054b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00d      	beq.n	8005442 <USBD_StdEPReq+0x146>
 8005426:	7bbb      	ldrb	r3, [r7, #14]
 8005428:	2b80      	cmp	r3, #128	@ 0x80
 800542a:	d00a      	beq.n	8005442 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800542c:	7bbb      	ldrb	r3, [r7, #14]
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f001 f847 	bl	80064c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005436:	2180      	movs	r1, #128	@ 0x80
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 f843 	bl	80064c4 <USBD_LL_StallEP>
 800543e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005440:	e040      	b.n	80054c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fc3e 	bl	8005cc6 <USBD_CtlError>
              break;
 800544a:	e03b      	b.n	80054c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	885b      	ldrh	r3, [r3, #2]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d136      	bne.n	80054c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005454:	7bbb      	ldrb	r3, [r7, #14]
 8005456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800545e:	7bbb      	ldrb	r3, [r7, #14]
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 f84d 	bl	8006502 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fce6 	bl	8005e3a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800546e:	7bbb      	ldrb	r3, [r7, #14]
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fde4 	bl	8005040 <USBD_CoreFindEP>
 8005478:	4603      	mov	r3, r0
 800547a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800547c:	7b7b      	ldrb	r3, [r7, #13]
 800547e:	2bff      	cmp	r3, #255	@ 0xff
 8005480:	d01f      	beq.n	80054c2 <USBD_StdEPReq+0x1c6>
 8005482:	7b7b      	ldrb	r3, [r7, #13]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d11c      	bne.n	80054c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005488:	7b7a      	ldrb	r2, [r7, #13]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005490:	7b7a      	ldrb	r2, [r7, #13]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	32ae      	adds	r2, #174	@ 0xae
 8005496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d010      	beq.n	80054c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80054a0:	7b7a      	ldrb	r2, [r7, #13]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	32ae      	adds	r2, #174	@ 0xae
 80054a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
 80054b2:	4603      	mov	r3, r0
 80054b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80054b6:	e004      	b.n	80054c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fc03 	bl	8005cc6 <USBD_CtlError>
              break;
 80054c0:	e000      	b.n	80054c4 <USBD_StdEPReq+0x1c8>
              break;
 80054c2:	bf00      	nop
          }
          break;
 80054c4:	e0ab      	b.n	800561e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d002      	beq.n	80054d8 <USBD_StdEPReq+0x1dc>
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d032      	beq.n	800553c <USBD_StdEPReq+0x240>
 80054d6:	e097      	b.n	8005608 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054d8:	7bbb      	ldrb	r3, [r7, #14]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <USBD_StdEPReq+0x1f2>
 80054de:	7bbb      	ldrb	r3, [r7, #14]
 80054e0:	2b80      	cmp	r3, #128	@ 0x80
 80054e2:	d004      	beq.n	80054ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fbed 	bl	8005cc6 <USBD_CtlError>
                break;
 80054ec:	e091      	b.n	8005612 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	da0b      	bge.n	800550e <USBD_StdEPReq+0x212>
 80054f6:	7bbb      	ldrb	r3, [r7, #14]
 80054f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	3310      	adds	r3, #16
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	4413      	add	r3, r2
 800550a:	3304      	adds	r3, #4
 800550c:	e00b      	b.n	8005526 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800550e:	7bbb      	ldrb	r3, [r7, #14]
 8005510:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	4413      	add	r3, r2
 8005524:	3304      	adds	r3, #4
 8005526:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2202      	movs	r2, #2
 8005532:	4619      	mov	r1, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fc43 	bl	8005dc0 <USBD_CtlSendData>
              break;
 800553a:	e06a      	b.n	8005612 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800553c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005540:	2b00      	cmp	r3, #0
 8005542:	da11      	bge.n	8005568 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005544:	7bbb      	ldrb	r3, [r7, #14]
 8005546:	f003 020f 	and.w	r2, r3, #15
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	3324      	adds	r3, #36	@ 0x24
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d117      	bne.n	800558e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800555e:	6839      	ldr	r1, [r7, #0]
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fbb0 	bl	8005cc6 <USBD_CtlError>
                  break;
 8005566:	e054      	b.n	8005612 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005568:	7bbb      	ldrb	r3, [r7, #14]
 800556a:	f003 020f 	and.w	r2, r3, #15
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fb9d 	bl	8005cc6 <USBD_CtlError>
                  break;
 800558c:	e041      	b.n	8005612 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800558e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005592:	2b00      	cmp	r3, #0
 8005594:	da0b      	bge.n	80055ae <USBD_StdEPReq+0x2b2>
 8005596:	7bbb      	ldrb	r3, [r7, #14]
 8005598:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	3310      	adds	r3, #16
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	4413      	add	r3, r2
 80055aa:	3304      	adds	r3, #4
 80055ac:	e00b      	b.n	80055c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80055ae:	7bbb      	ldrb	r3, [r7, #14]
 80055b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	3304      	adds	r3, #4
 80055c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80055c8:	7bbb      	ldrb	r3, [r7, #14]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <USBD_StdEPReq+0x2d8>
 80055ce:	7bbb      	ldrb	r3, [r7, #14]
 80055d0:	2b80      	cmp	r3, #128	@ 0x80
 80055d2:	d103      	bne.n	80055dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	e00e      	b.n	80055fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80055dc:	7bbb      	ldrb	r3, [r7, #14]
 80055de:	4619      	mov	r1, r3
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 ffad 	bl	8006540 <USBD_LL_IsStallEP>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e002      	b.n	80055fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2202      	movs	r2, #2
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fbdd 	bl	8005dc0 <USBD_CtlSendData>
              break;
 8005606:	e004      	b.n	8005612 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fb5b 	bl	8005cc6 <USBD_CtlError>
              break;
 8005610:	bf00      	nop
          }
          break;
 8005612:	e004      	b.n	800561e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fb55 	bl	8005cc6 <USBD_CtlError>
          break;
 800561c:	bf00      	nop
      }
      break;
 800561e:	e005      	b.n	800562c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fb4f 	bl	8005cc6 <USBD_CtlError>
      break;
 8005628:	e000      	b.n	800562c <USBD_StdEPReq+0x330>
      break;
 800562a:	bf00      	nop
  }

  return ret;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	885b      	ldrh	r3, [r3, #2]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	2b06      	cmp	r3, #6
 800565a:	f200 8128 	bhi.w	80058ae <USBD_GetDescriptor+0x276>
 800565e:	a201      	add	r2, pc, #4	@ (adr r2, 8005664 <USBD_GetDescriptor+0x2c>)
 8005660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005664:	08005681 	.word	0x08005681
 8005668:	08005699 	.word	0x08005699
 800566c:	080056d9 	.word	0x080056d9
 8005670:	080058af 	.word	0x080058af
 8005674:	080058af 	.word	0x080058af
 8005678:	0800584f 	.word	0x0800584f
 800567c:	0800587b 	.word	0x0800587b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	7c12      	ldrb	r2, [r2, #16]
 800568c:	f107 0108 	add.w	r1, r7, #8
 8005690:	4610      	mov	r0, r2
 8005692:	4798      	blx	r3
 8005694:	60f8      	str	r0, [r7, #12]
      break;
 8005696:	e112      	b.n	80058be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	7c1b      	ldrb	r3, [r3, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10d      	bne.n	80056bc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	f107 0208 	add.w	r2, r7, #8
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
 80056b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	2202      	movs	r2, #2
 80056b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80056ba:	e100      	b.n	80058be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c4:	f107 0208 	add.w	r2, r7, #8
 80056c8:	4610      	mov	r0, r2
 80056ca:	4798      	blx	r3
 80056cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3301      	adds	r3, #1
 80056d2:	2202      	movs	r2, #2
 80056d4:	701a      	strb	r2, [r3, #0]
      break;
 80056d6:	e0f2      	b.n	80058be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	885b      	ldrh	r3, [r3, #2]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b05      	cmp	r3, #5
 80056e0:	f200 80ac 	bhi.w	800583c <USBD_GetDescriptor+0x204>
 80056e4:	a201      	add	r2, pc, #4	@ (adr r2, 80056ec <USBD_GetDescriptor+0xb4>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	08005705 	.word	0x08005705
 80056f0:	08005739 	.word	0x08005739
 80056f4:	0800576d 	.word	0x0800576d
 80056f8:	080057a1 	.word	0x080057a1
 80056fc:	080057d5 	.word	0x080057d5
 8005700:	08005809 	.word	0x08005809
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	7c12      	ldrb	r2, [r2, #16]
 800571c:	f107 0108 	add.w	r1, r7, #8
 8005720:	4610      	mov	r0, r2
 8005722:	4798      	blx	r3
 8005724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005726:	e091      	b.n	800584c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005728:	6839      	ldr	r1, [r7, #0]
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 facb 	bl	8005cc6 <USBD_CtlError>
            err++;
 8005730:	7afb      	ldrb	r3, [r7, #11]
 8005732:	3301      	adds	r3, #1
 8005734:	72fb      	strb	r3, [r7, #11]
          break;
 8005736:	e089      	b.n	800584c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	7c12      	ldrb	r2, [r2, #16]
 8005750:	f107 0108 	add.w	r1, r7, #8
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
 8005758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800575a:	e077      	b.n	800584c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fab1 	bl	8005cc6 <USBD_CtlError>
            err++;
 8005764:	7afb      	ldrb	r3, [r7, #11]
 8005766:	3301      	adds	r3, #1
 8005768:	72fb      	strb	r3, [r7, #11]
          break;
 800576a:	e06f      	b.n	800584c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00b      	beq.n	8005790 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	7c12      	ldrb	r2, [r2, #16]
 8005784:	f107 0108 	add.w	r1, r7, #8
 8005788:	4610      	mov	r0, r2
 800578a:	4798      	blx	r3
 800578c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800578e:	e05d      	b.n	800584c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa97 	bl	8005cc6 <USBD_CtlError>
            err++;
 8005798:	7afb      	ldrb	r3, [r7, #11]
 800579a:	3301      	adds	r3, #1
 800579c:	72fb      	strb	r3, [r7, #11]
          break;
 800579e:	e055      	b.n	800584c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	7c12      	ldrb	r2, [r2, #16]
 80057b8:	f107 0108 	add.w	r1, r7, #8
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
 80057c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057c2:	e043      	b.n	800584c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fa7d 	bl	8005cc6 <USBD_CtlError>
            err++;
 80057cc:	7afb      	ldrb	r3, [r7, #11]
 80057ce:	3301      	adds	r3, #1
 80057d0:	72fb      	strb	r3, [r7, #11]
          break;
 80057d2:	e03b      	b.n	800584c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00b      	beq.n	80057f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	7c12      	ldrb	r2, [r2, #16]
 80057ec:	f107 0108 	add.w	r1, r7, #8
 80057f0:	4610      	mov	r0, r2
 80057f2:	4798      	blx	r3
 80057f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057f6:	e029      	b.n	800584c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa63 	bl	8005cc6 <USBD_CtlError>
            err++;
 8005800:	7afb      	ldrb	r3, [r7, #11]
 8005802:	3301      	adds	r3, #1
 8005804:	72fb      	strb	r3, [r7, #11]
          break;
 8005806:	e021      	b.n	800584c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	7c12      	ldrb	r2, [r2, #16]
 8005820:	f107 0108 	add.w	r1, r7, #8
 8005824:	4610      	mov	r0, r2
 8005826:	4798      	blx	r3
 8005828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800582a:	e00f      	b.n	800584c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fa49 	bl	8005cc6 <USBD_CtlError>
            err++;
 8005834:	7afb      	ldrb	r3, [r7, #11]
 8005836:	3301      	adds	r3, #1
 8005838:	72fb      	strb	r3, [r7, #11]
          break;
 800583a:	e007      	b.n	800584c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fa41 	bl	8005cc6 <USBD_CtlError>
          err++;
 8005844:	7afb      	ldrb	r3, [r7, #11]
 8005846:	3301      	adds	r3, #1
 8005848:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800584a:	bf00      	nop
      }
      break;
 800584c:	e037      	b.n	80058be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	7c1b      	ldrb	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800585c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585e:	f107 0208 	add.w	r2, r7, #8
 8005862:	4610      	mov	r0, r2
 8005864:	4798      	blx	r3
 8005866:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005868:	e029      	b.n	80058be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fa2a 	bl	8005cc6 <USBD_CtlError>
        err++;
 8005872:	7afb      	ldrb	r3, [r7, #11]
 8005874:	3301      	adds	r3, #1
 8005876:	72fb      	strb	r3, [r7, #11]
      break;
 8005878:	e021      	b.n	80058be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	7c1b      	ldrb	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10d      	bne.n	800589e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588a:	f107 0208 	add.w	r2, r7, #8
 800588e:	4610      	mov	r0, r2
 8005890:	4798      	blx	r3
 8005892:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	2207      	movs	r2, #7
 800589a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800589c:	e00f      	b.n	80058be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fa10 	bl	8005cc6 <USBD_CtlError>
        err++;
 80058a6:	7afb      	ldrb	r3, [r7, #11]
 80058a8:	3301      	adds	r3, #1
 80058aa:	72fb      	strb	r3, [r7, #11]
      break;
 80058ac:	e007      	b.n	80058be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fa08 	bl	8005cc6 <USBD_CtlError>
      err++;
 80058b6:	7afb      	ldrb	r3, [r7, #11]
 80058b8:	3301      	adds	r3, #1
 80058ba:	72fb      	strb	r3, [r7, #11]
      break;
 80058bc:	bf00      	nop
  }

  if (err != 0U)
 80058be:	7afb      	ldrb	r3, [r7, #11]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d11e      	bne.n	8005902 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	88db      	ldrh	r3, [r3, #6]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d016      	beq.n	80058fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80058cc:	893b      	ldrh	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00e      	beq.n	80058f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	88da      	ldrh	r2, [r3, #6]
 80058d6:	893b      	ldrh	r3, [r7, #8]
 80058d8:	4293      	cmp	r3, r2
 80058da:	bf28      	it	cs
 80058dc:	4613      	movcs	r3, r2
 80058de:	b29b      	uxth	r3, r3
 80058e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80058e2:	893b      	ldrh	r3, [r7, #8]
 80058e4:	461a      	mov	r2, r3
 80058e6:	68f9      	ldr	r1, [r7, #12]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fa69 	bl	8005dc0 <USBD_CtlSendData>
 80058ee:	e009      	b.n	8005904 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f9e7 	bl	8005cc6 <USBD_CtlError>
 80058f8:	e004      	b.n	8005904 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa9d 	bl	8005e3a <USBD_CtlSendStatus>
 8005900:	e000      	b.n	8005904 <USBD_GetDescriptor+0x2cc>
    return;
 8005902:	bf00      	nop
  }
}
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop

0800590c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	889b      	ldrh	r3, [r3, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d131      	bne.n	8005982 <USBD_SetAddress+0x76>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	88db      	ldrh	r3, [r3, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d12d      	bne.n	8005982 <USBD_SetAddress+0x76>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	885b      	ldrh	r3, [r3, #2]
 800592a:	2b7f      	cmp	r3, #127	@ 0x7f
 800592c:	d829      	bhi.n	8005982 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	885b      	ldrh	r3, [r3, #2]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005938:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b03      	cmp	r3, #3
 8005944:	d104      	bne.n	8005950 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f9bc 	bl	8005cc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800594e:	e01d      	b.n	800598c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	7bfa      	ldrb	r2, [r7, #15]
 8005954:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fe1b 	bl	8006598 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fa69 	bl	8005e3a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d004      	beq.n	8005978 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005976:	e009      	b.n	800598c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005980:	e004      	b.n	800598c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f99e 	bl	8005cc6 <USBD_CtlError>
  }
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	885b      	ldrh	r3, [r3, #2]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	4b4e      	ldr	r3, [pc, #312]	@ (8005ae4 <USBD_SetConfig+0x150>)
 80059aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80059ac:	4b4d      	ldr	r3, [pc, #308]	@ (8005ae4 <USBD_SetConfig+0x150>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d905      	bls.n	80059c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f985 	bl	8005cc6 <USBD_CtlError>
    return USBD_FAIL;
 80059bc:	2303      	movs	r3, #3
 80059be:	e08c      	b.n	8005ada <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d002      	beq.n	80059d2 <USBD_SetConfig+0x3e>
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d029      	beq.n	8005a24 <USBD_SetConfig+0x90>
 80059d0:	e075      	b.n	8005abe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80059d2:	4b44      	ldr	r3, [pc, #272]	@ (8005ae4 <USBD_SetConfig+0x150>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d020      	beq.n	8005a1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80059da:	4b42      	ldr	r3, [pc, #264]	@ (8005ae4 <USBD_SetConfig+0x150>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80059e4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ae4 <USBD_SetConfig+0x150>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fe ffe3 	bl	80049b6 <USBD_SetClassConfig>
 80059f0:	4603      	mov	r3, r0
 80059f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d008      	beq.n	8005a0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f962 	bl	8005cc6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a0a:	e065      	b.n	8005ad8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fa14 	bl	8005e3a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2203      	movs	r2, #3
 8005a16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005a1a:	e05d      	b.n	8005ad8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fa0c 	bl	8005e3a <USBD_CtlSendStatus>
      break;
 8005a22:	e059      	b.n	8005ad8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005a24:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae4 <USBD_SetConfig+0x150>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d112      	bne.n	8005a52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005a34:	4b2b      	ldr	r3, [pc, #172]	@ (8005ae4 <USBD_SetConfig+0x150>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a3e:	4b29      	ldr	r3, [pc, #164]	@ (8005ae4 <USBD_SetConfig+0x150>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fe ffd2 	bl	80049ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9f5 	bl	8005e3a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a50:	e042      	b.n	8005ad8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005a52:	4b24      	ldr	r3, [pc, #144]	@ (8005ae4 <USBD_SetConfig+0x150>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d02a      	beq.n	8005ab6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7fe ffc0 	bl	80049ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae4 <USBD_SetConfig+0x150>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a78:	4b1a      	ldr	r3, [pc, #104]	@ (8005ae4 <USBD_SetConfig+0x150>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fe ff99 	bl	80049b6 <USBD_SetClassConfig>
 8005a84:	4603      	mov	r3, r0
 8005a86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00f      	beq.n	8005aae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f918 	bl	8005cc6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fe ffa5 	bl	80049ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005aac:	e014      	b.n	8005ad8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f9c3 	bl	8005e3a <USBD_CtlSendStatus>
      break;
 8005ab4:	e010      	b.n	8005ad8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f9bf 	bl	8005e3a <USBD_CtlSendStatus>
      break;
 8005abc:	e00c      	b.n	8005ad8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f900 	bl	8005cc6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ac6:	4b07      	ldr	r3, [pc, #28]	@ (8005ae4 <USBD_SetConfig+0x150>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fe ff8e 	bl	80049ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad6:	bf00      	nop
  }

  return ret;
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000154 	.word	0x20000154

08005ae8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	88db      	ldrh	r3, [r3, #6]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d004      	beq.n	8005b04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005afa:	6839      	ldr	r1, [r7, #0]
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f8e2 	bl	8005cc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005b02:	e023      	b.n	8005b4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	dc02      	bgt.n	8005b16 <USBD_GetConfig+0x2e>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	dc03      	bgt.n	8005b1c <USBD_GetConfig+0x34>
 8005b14:	e015      	b.n	8005b42 <USBD_GetConfig+0x5a>
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d00b      	beq.n	8005b32 <USBD_GetConfig+0x4a>
 8005b1a:	e012      	b.n	8005b42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3308      	adds	r3, #8
 8005b26:	2201      	movs	r2, #1
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f948 	bl	8005dc0 <USBD_CtlSendData>
        break;
 8005b30:	e00c      	b.n	8005b4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3304      	adds	r3, #4
 8005b36:	2201      	movs	r2, #1
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f940 	bl	8005dc0 <USBD_CtlSendData>
        break;
 8005b40:	e004      	b.n	8005b4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005b42:	6839      	ldr	r1, [r7, #0]
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f8be 	bl	8005cc6 <USBD_CtlError>
        break;
 8005b4a:	bf00      	nop
}
 8005b4c:	bf00      	nop
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d81e      	bhi.n	8005baa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	88db      	ldrh	r3, [r3, #6]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d004      	beq.n	8005b7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f8a5 	bl	8005cc6 <USBD_CtlError>
        break;
 8005b7c:	e01a      	b.n	8005bb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f043 0202 	orr.w	r2, r3, #2
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f90c 	bl	8005dc0 <USBD_CtlSendData>
      break;
 8005ba8:	e004      	b.n	8005bb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f88a 	bl	8005cc6 <USBD_CtlError>
      break;
 8005bb2:	bf00      	nop
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	885b      	ldrh	r3, [r3, #2]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d107      	bne.n	8005bde <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f92f 	bl	8005e3a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005bdc:	e013      	b.n	8005c06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	885b      	ldrh	r3, [r3, #2]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d10b      	bne.n	8005bfe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	889b      	ldrh	r3, [r3, #4]
 8005bea:	0a1b      	lsrs	r3, r3, #8
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f91f 	bl	8005e3a <USBD_CtlSendStatus>
}
 8005bfc:	e003      	b.n	8005c06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f860 	bl	8005cc6 <USBD_CtlError>
}
 8005c06:	bf00      	nop
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d80b      	bhi.n	8005c3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	885b      	ldrh	r3, [r3, #2]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d10c      	bne.n	8005c48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f8ff 	bl	8005e3a <USBD_CtlSendStatus>
      }
      break;
 8005c3c:	e004      	b.n	8005c48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005c3e:	6839      	ldr	r1, [r7, #0]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f840 	bl	8005cc6 <USBD_CtlError>
      break;
 8005c46:	e000      	b.n	8005c4a <USBD_ClrFeature+0x3c>
      break;
 8005c48:	bf00      	nop
  }
}
 8005c4a:	bf00      	nop
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	781a      	ldrb	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	781a      	ldrb	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff fa40 	bl	8005102 <SWAPBYTE>
 8005c82:	4603      	mov	r3, r0
 8005c84:	461a      	mov	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff fa33 	bl	8005102 <SWAPBYTE>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3301      	adds	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f7ff fa26 	bl	8005102 <SWAPBYTE>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	461a      	mov	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	80da      	strh	r2, [r3, #6]
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cd0:	2180      	movs	r1, #128	@ 0x80
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fbf6 	bl	80064c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005cd8:	2100      	movs	r1, #0
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fbf2 	bl	80064c4 <USBD_LL_StallEP>
}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d042      	beq.n	8005d84 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005d02:	6938      	ldr	r0, [r7, #16]
 8005d04:	f000 f842 	bl	8005d8c <USBD_GetLen>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d12:	d808      	bhi.n	8005d26 <USBD_GetString+0x3e>
 8005d14:	6938      	ldr	r0, [r7, #16]
 8005d16:	f000 f839 	bl	8005d8c <USBD_GetLen>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	e001      	b.n	8005d2a <USBD_GetString+0x42>
 8005d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	4413      	add	r3, r2
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	7812      	ldrb	r2, [r2, #0]
 8005d38:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	4413      	add	r3, r2
 8005d46:	2203      	movs	r2, #3
 8005d48:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005d50:	e013      	b.n	8005d7a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	4413      	add	r3, r2
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	7812      	ldrb	r2, [r2, #0]
 8005d5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	3301      	adds	r3, #1
 8005d62:	613b      	str	r3, [r7, #16]
    idx++;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	3301      	adds	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	4413      	add	r3, r2
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]
    idx++;
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	3301      	adds	r3, #1
 8005d78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e7      	bne.n	8005d52 <USBD_GetString+0x6a>
 8005d82:	e000      	b.n	8005d86 <USBD_GetString+0x9e>
    return;
 8005d84:	bf00      	nop
  }
}
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005d9c:	e005      	b.n	8005daa <USBD_GetLen+0x1e>
  {
    len++;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	3301      	adds	r3, #1
 8005da2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f5      	bne.n	8005d9e <USBD_GetLen+0x12>
  }

  return len;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	2100      	movs	r1, #0
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 fbf5 	bl	80065d6 <USBD_LL_Transmit>

  return USBD_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	2100      	movs	r1, #0
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 fbe4 	bl	80065d6 <USBD_LL_Transmit>

  return USBD_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	2100      	movs	r1, #0
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fbf4 	bl	8006618 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2204      	movs	r2, #4
 8005e46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2100      	movs	r1, #0
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fbc0 	bl	80065d6 <USBD_LL_Transmit>

  return USBD_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2205      	movs	r2, #5
 8005e6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e70:	2300      	movs	r3, #0
 8005e72:	2200      	movs	r2, #0
 8005e74:	2100      	movs	r1, #0
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fbce 	bl	8006618 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	490e      	ldr	r1, [pc, #56]	@ (8005ec8 <MX_USB_DEVICE_Init+0x40>)
 8005e90:	480e      	ldr	r0, [pc, #56]	@ (8005ecc <MX_USB_DEVICE_Init+0x44>)
 8005e92:	f7fe fd13 	bl	80048bc <USBD_Init>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005e9c:	f7fa fcfe 	bl	800089c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005ea0:	490b      	ldr	r1, [pc, #44]	@ (8005ed0 <MX_USB_DEVICE_Init+0x48>)
 8005ea2:	480a      	ldr	r0, [pc, #40]	@ (8005ecc <MX_USB_DEVICE_Init+0x44>)
 8005ea4:	f7fe fd3a 	bl	800491c <USBD_RegisterClass>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005eae:	f7fa fcf5 	bl	800089c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005eb2:	4806      	ldr	r0, [pc, #24]	@ (8005ecc <MX_USB_DEVICE_Init+0x44>)
 8005eb4:	f7fe fd68 	bl	8004988 <USBD_Start>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005ebe:	f7fa fced 	bl	800089c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005ec2:	bf00      	nop
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	200000c0 	.word	0x200000c0
 8005ecc:	20000158 	.word	0x20000158
 8005ed0:	2000000c 	.word	0x2000000c

08005ed4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	6039      	str	r1, [r7, #0]
 8005ede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2212      	movs	r2, #18
 8005ee4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005ee6:	4b03      	ldr	r3, [pc, #12]	@ (8005ef4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	200000dc 	.word	0x200000dc

08005ef8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	6039      	str	r1, [r7, #0]
 8005f02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2204      	movs	r2, #4
 8005f08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005f0a:	4b03      	ldr	r3, [pc, #12]	@ (8005f18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	200000f0 	.word	0x200000f0

08005f1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	4603      	mov	r3, r0
 8005f24:	6039      	str	r1, [r7, #0]
 8005f26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d105      	bne.n	8005f3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	4907      	ldr	r1, [pc, #28]	@ (8005f50 <USBD_FS_ProductStrDescriptor+0x34>)
 8005f32:	4808      	ldr	r0, [pc, #32]	@ (8005f54 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f34:	f7ff fed8 	bl	8005ce8 <USBD_GetString>
 8005f38:	e004      	b.n	8005f44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	4904      	ldr	r1, [pc, #16]	@ (8005f50 <USBD_FS_ProductStrDescriptor+0x34>)
 8005f3e:	4805      	ldr	r0, [pc, #20]	@ (8005f54 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f40:	f7ff fed2 	bl	8005ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f44:	4b02      	ldr	r3, [pc, #8]	@ (8005f50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000434 	.word	0x20000434
 8005f54:	08006754 	.word	0x08006754

08005f58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	6039      	str	r1, [r7, #0]
 8005f62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	4904      	ldr	r1, [pc, #16]	@ (8005f78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005f68:	4804      	ldr	r0, [pc, #16]	@ (8005f7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005f6a:	f7ff febd 	bl	8005ce8 <USBD_GetString>
  return USBD_StrDesc;
 8005f6e:	4b02      	ldr	r3, [pc, #8]	@ (8005f78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20000434 	.word	0x20000434
 8005f7c:	0800676c 	.word	0x0800676c

08005f80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	4603      	mov	r3, r0
 8005f88:	6039      	str	r1, [r7, #0]
 8005f8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	221a      	movs	r2, #26
 8005f90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005f92:	f000 f843 	bl	800601c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005f96:	4b02      	ldr	r3, [pc, #8]	@ (8005fa0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	200000f4 	.word	0x200000f4

08005fa4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	6039      	str	r1, [r7, #0]
 8005fae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	4907      	ldr	r1, [pc, #28]	@ (8005fd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005fba:	4808      	ldr	r0, [pc, #32]	@ (8005fdc <USBD_FS_ConfigStrDescriptor+0x38>)
 8005fbc:	f7ff fe94 	bl	8005ce8 <USBD_GetString>
 8005fc0:	e004      	b.n	8005fcc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	4904      	ldr	r1, [pc, #16]	@ (8005fd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005fc6:	4805      	ldr	r0, [pc, #20]	@ (8005fdc <USBD_FS_ConfigStrDescriptor+0x38>)
 8005fc8:	f7ff fe8e 	bl	8005ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fcc:	4b02      	ldr	r3, [pc, #8]	@ (8005fd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000434 	.word	0x20000434
 8005fdc:	08006780 	.word	0x08006780

08005fe0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	6039      	str	r1, [r7, #0]
 8005fea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005fec:	79fb      	ldrb	r3, [r7, #7]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d105      	bne.n	8005ffe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	4907      	ldr	r1, [pc, #28]	@ (8006014 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005ff6:	4808      	ldr	r0, [pc, #32]	@ (8006018 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005ff8:	f7ff fe76 	bl	8005ce8 <USBD_GetString>
 8005ffc:	e004      	b.n	8006008 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	4904      	ldr	r1, [pc, #16]	@ (8006014 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006002:	4805      	ldr	r0, [pc, #20]	@ (8006018 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006004:	f7ff fe70 	bl	8005ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006008:	4b02      	ldr	r3, [pc, #8]	@ (8006014 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20000434 	.word	0x20000434
 8006018:	0800678c 	.word	0x0800678c

0800601c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006022:	4b0f      	ldr	r3, [pc, #60]	@ (8006060 <Get_SerialNum+0x44>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006028:	4b0e      	ldr	r3, [pc, #56]	@ (8006064 <Get_SerialNum+0x48>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800602e:	4b0e      	ldr	r3, [pc, #56]	@ (8006068 <Get_SerialNum+0x4c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4413      	add	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006042:	2208      	movs	r2, #8
 8006044:	4909      	ldr	r1, [pc, #36]	@ (800606c <Get_SerialNum+0x50>)
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f814 	bl	8006074 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800604c:	2204      	movs	r2, #4
 800604e:	4908      	ldr	r1, [pc, #32]	@ (8006070 <Get_SerialNum+0x54>)
 8006050:	68b8      	ldr	r0, [r7, #8]
 8006052:	f000 f80f 	bl	8006074 <IntToUnicode>
  }
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	1fff7a10 	.word	0x1fff7a10
 8006064:	1fff7a14 	.word	0x1fff7a14
 8006068:	1fff7a18 	.word	0x1fff7a18
 800606c:	200000f6 	.word	0x200000f6
 8006070:	20000106 	.word	0x20000106

08006074 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]
 800608a:	e027      	b.n	80060dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	0f1b      	lsrs	r3, r3, #28
 8006090:	2b09      	cmp	r3, #9
 8006092:	d80b      	bhi.n	80060ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	0f1b      	lsrs	r3, r3, #28
 8006098:	b2da      	uxtb	r2, r3
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	4619      	mov	r1, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	440b      	add	r3, r1
 80060a4:	3230      	adds	r2, #48	@ 0x30
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	e00a      	b.n	80060c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	0f1b      	lsrs	r3, r3, #28
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	4619      	mov	r1, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	440b      	add	r3, r1
 80060bc:	3237      	adds	r2, #55	@ 0x37
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	3301      	adds	r3, #1
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	4413      	add	r3, r2
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	3301      	adds	r3, #1
 80060da:	75fb      	strb	r3, [r7, #23]
 80060dc:	7dfa      	ldrb	r2, [r7, #23]
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d3d3      	bcc.n	800608c <IntToUnicode+0x18>
  }
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	@ 0x28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060fc:	f107 0314 	add.w	r3, r7, #20
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	609a      	str	r2, [r3, #8]
 8006108:	60da      	str	r2, [r3, #12]
 800610a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006114:	d13a      	bne.n	800618c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006116:	2300      	movs	r3, #0
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	4b1e      	ldr	r3, [pc, #120]	@ (8006194 <HAL_PCD_MspInit+0xa0>)
 800611c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611e:	4a1d      	ldr	r2, [pc, #116]	@ (8006194 <HAL_PCD_MspInit+0xa0>)
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	6313      	str	r3, [r2, #48]	@ 0x30
 8006126:	4b1b      	ldr	r3, [pc, #108]	@ (8006194 <HAL_PCD_MspInit+0xa0>)
 8006128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006132:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006138:	2302      	movs	r3, #2
 800613a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613c:	2300      	movs	r3, #0
 800613e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006140:	2303      	movs	r3, #3
 8006142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006144:	230a      	movs	r3, #10
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006148:	f107 0314 	add.w	r3, r7, #20
 800614c:	4619      	mov	r1, r3
 800614e:	4812      	ldr	r0, [pc, #72]	@ (8006198 <HAL_PCD_MspInit+0xa4>)
 8006150:	f7fa fdf2 	bl	8000d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006154:	4b0f      	ldr	r3, [pc, #60]	@ (8006194 <HAL_PCD_MspInit+0xa0>)
 8006156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006158:	4a0e      	ldr	r2, [pc, #56]	@ (8006194 <HAL_PCD_MspInit+0xa0>)
 800615a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800615e:	6353      	str	r3, [r2, #52]	@ 0x34
 8006160:	2300      	movs	r3, #0
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	4b0b      	ldr	r3, [pc, #44]	@ (8006194 <HAL_PCD_MspInit+0xa0>)
 8006166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006168:	4a0a      	ldr	r2, [pc, #40]	@ (8006194 <HAL_PCD_MspInit+0xa0>)
 800616a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800616e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006170:	4b08      	ldr	r3, [pc, #32]	@ (8006194 <HAL_PCD_MspInit+0xa0>)
 8006172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800617c:	2200      	movs	r2, #0
 800617e:	2100      	movs	r1, #0
 8006180:	2043      	movs	r0, #67	@ 0x43
 8006182:	f7fa fda2 	bl	8000cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006186:	2043      	movs	r0, #67	@ 0x43
 8006188:	f7fa fdbb 	bl	8000d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800618c:	bf00      	nop
 800618e:	3728      	adds	r7, #40	@ 0x28
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40023800 	.word	0x40023800
 8006198:	40020000 	.word	0x40020000

0800619c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f7fe fc35 	bl	8004a22 <USBD_LL_SetupStage>
}
 80061b8:	bf00      	nop
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80061d2:	78fa      	ldrb	r2, [r7, #3]
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4613      	mov	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	4619      	mov	r1, r3
 80061ea:	f7fe fc6f 	bl	8004acc <USBD_LL_DataOutStage>
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	460b      	mov	r3, r1
 8006200:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	3320      	adds	r3, #32
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	4619      	mov	r1, r3
 800621e:	f7fe fd08 	bl	8004c32 <USBD_LL_DataInStage>
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006238:	4618      	mov	r0, r3
 800623a:	f7fe fe42 	bl	8004ec2 <USBD_LL_SOF>
}
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800624e:	2301      	movs	r3, #1
 8006250:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	79db      	ldrb	r3, [r3, #7]
 8006256:	2b02      	cmp	r3, #2
 8006258:	d001      	beq.n	800625e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800625a:	f7fa fb1f 	bl	800089c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006264:	7bfa      	ldrb	r2, [r7, #15]
 8006266:	4611      	mov	r1, r2
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe fde6 	bl	8004e3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006274:	4618      	mov	r0, r3
 8006276:	f7fe fd8e 	bl	8004d96 <USBD_LL_Reset>
}
 800627a:	bf00      	nop
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fde1 	bl	8004e5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	7adb      	ldrb	r3, [r3, #11]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80062b8:	4b04      	ldr	r3, [pc, #16]	@ (80062cc <HAL_PCD_SuspendCallback+0x48>)
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	4a03      	ldr	r2, [pc, #12]	@ (80062cc <HAL_PCD_SuspendCallback+0x48>)
 80062be:	f043 0306 	orr.w	r3, r3, #6
 80062c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80062c4:	bf00      	nop
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	e000ed00 	.word	0xe000ed00

080062d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fdd7 	bl	8004e92 <USBD_LL_Resume>
}
 80062e4:	bf00      	nop
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062fe:	78fa      	ldrb	r2, [r7, #3]
 8006300:	4611      	mov	r1, r2
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe fe2f 	bl	8004f66 <USBD_LL_IsoOUTIncomplete>
}
 8006308:	bf00      	nop
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006322:	78fa      	ldrb	r2, [r7, #3]
 8006324:	4611      	mov	r1, r2
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fdeb 	bl	8004f02 <USBD_LL_IsoINIncomplete>
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006342:	4618      	mov	r0, r3
 8006344:	f7fe fe41 	bl	8004fca <USBD_LL_DevConnected>
}
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800635e:	4618      	mov	r0, r3
 8006360:	f7fe fe3e 	bl	8004fe0 <USBD_LL_DevDisconnected>
}
 8006364:	bf00      	nop
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d13c      	bne.n	80063f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800637c:	4a20      	ldr	r2, [pc, #128]	@ (8006400 <USBD_LL_Init+0x94>)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a1e      	ldr	r2, [pc, #120]	@ (8006400 <USBD_LL_Init+0x94>)
 8006388:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800638c:	4b1c      	ldr	r3, [pc, #112]	@ (8006400 <USBD_LL_Init+0x94>)
 800638e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006392:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006394:	4b1a      	ldr	r3, [pc, #104]	@ (8006400 <USBD_LL_Init+0x94>)
 8006396:	2204      	movs	r2, #4
 8006398:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800639a:	4b19      	ldr	r3, [pc, #100]	@ (8006400 <USBD_LL_Init+0x94>)
 800639c:	2202      	movs	r2, #2
 800639e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80063a0:	4b17      	ldr	r3, [pc, #92]	@ (8006400 <USBD_LL_Init+0x94>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80063a6:	4b16      	ldr	r3, [pc, #88]	@ (8006400 <USBD_LL_Init+0x94>)
 80063a8:	2202      	movs	r2, #2
 80063aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80063ac:	4b14      	ldr	r3, [pc, #80]	@ (8006400 <USBD_LL_Init+0x94>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80063b2:	4b13      	ldr	r3, [pc, #76]	@ (8006400 <USBD_LL_Init+0x94>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80063b8:	4b11      	ldr	r3, [pc, #68]	@ (8006400 <USBD_LL_Init+0x94>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80063be:	4b10      	ldr	r3, [pc, #64]	@ (8006400 <USBD_LL_Init+0x94>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80063c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006400 <USBD_LL_Init+0x94>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80063ca:	480d      	ldr	r0, [pc, #52]	@ (8006400 <USBD_LL_Init+0x94>)
 80063cc:	f7fa fe69 	bl	80010a2 <HAL_PCD_Init>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80063d6:	f7fa fa61 	bl	800089c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80063da:	2180      	movs	r1, #128	@ 0x80
 80063dc:	4808      	ldr	r0, [pc, #32]	@ (8006400 <USBD_LL_Init+0x94>)
 80063de:	f7fc f87e 	bl	80024de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80063e2:	2240      	movs	r2, #64	@ 0x40
 80063e4:	2100      	movs	r1, #0
 80063e6:	4806      	ldr	r0, [pc, #24]	@ (8006400 <USBD_LL_Init+0x94>)
 80063e8:	f7fc f832 	bl	8002450 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80063ec:	2280      	movs	r2, #128	@ 0x80
 80063ee:	2101      	movs	r1, #1
 80063f0:	4803      	ldr	r0, [pc, #12]	@ (8006400 <USBD_LL_Init+0x94>)
 80063f2:	f7fc f82d 	bl	8002450 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20000634 	.word	0x20000634

08006404 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800641a:	4618      	mov	r0, r3
 800641c:	f7fa ff50 	bl	80012c0 <HAL_PCD_Start>
 8006420:	4603      	mov	r3, r0
 8006422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 f930 	bl	800668c <USBD_Get_USB_Status>
 800642c:	4603      	mov	r3, r0
 800642e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006430:	7bbb      	ldrb	r3, [r7, #14]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	4608      	mov	r0, r1
 8006444:	4611      	mov	r1, r2
 8006446:	461a      	mov	r2, r3
 8006448:	4603      	mov	r3, r0
 800644a:	70fb      	strb	r3, [r7, #3]
 800644c:	460b      	mov	r3, r1
 800644e:	70bb      	strb	r3, [r7, #2]
 8006450:	4613      	mov	r3, r2
 8006452:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006462:	78bb      	ldrb	r3, [r7, #2]
 8006464:	883a      	ldrh	r2, [r7, #0]
 8006466:	78f9      	ldrb	r1, [r7, #3]
 8006468:	f7fb fc24 	bl	8001cb4 <HAL_PCD_EP_Open>
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	4618      	mov	r0, r3
 8006474:	f000 f90a 	bl	800668c <USBD_Get_USB_Status>
 8006478:	4603      	mov	r3, r0
 800647a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800647c:	7bbb      	ldrb	r3, [r7, #14]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80064a0:	78fa      	ldrb	r2, [r7, #3]
 80064a2:	4611      	mov	r1, r2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fb fc6f 	bl	8001d88 <HAL_PCD_EP_Close>
 80064aa:	4603      	mov	r3, r0
 80064ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 f8eb 	bl	800668c <USBD_Get_USB_Status>
 80064b6:	4603      	mov	r3, r0
 80064b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	4611      	mov	r1, r2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fb fd0f 	bl	8001f06 <HAL_PCD_EP_SetStall>
 80064e8:	4603      	mov	r3, r0
 80064ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 f8cc 	bl	800668c <USBD_Get_USB_Status>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	460b      	mov	r3, r1
 800650c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800651c:	78fa      	ldrb	r2, [r7, #3]
 800651e:	4611      	mov	r1, r2
 8006520:	4618      	mov	r0, r3
 8006522:	f7fb fd53 	bl	8001fcc <HAL_PCD_EP_ClrStall>
 8006526:	4603      	mov	r3, r0
 8006528:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 f8ad 	bl	800668c <USBD_Get_USB_Status>
 8006532:	4603      	mov	r3, r0
 8006534:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006536:	7bbb      	ldrb	r3, [r7, #14]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006552:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006558:	2b00      	cmp	r3, #0
 800655a:	da0b      	bge.n	8006574 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006562:	68f9      	ldr	r1, [r7, #12]
 8006564:	4613      	mov	r3, r2
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	440b      	add	r3, r1
 800656e:	3316      	adds	r3, #22
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	e00b      	b.n	800658c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	4613      	mov	r3, r2
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	440b      	add	r3, r1
 8006586:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800658a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80065b2:	78fa      	ldrb	r2, [r7, #3]
 80065b4:	4611      	mov	r1, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fb fb58 	bl	8001c6c <HAL_PCD_SetAddress>
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 f862 	bl	800668c <USBD_Get_USB_Status>
 80065c8:	4603      	mov	r3, r0
 80065ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b086      	sub	sp, #24
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	603b      	str	r3, [r7, #0]
 80065e2:	460b      	mov	r3, r1
 80065e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80065f4:	7af9      	ldrb	r1, [r7, #11]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	f7fb fc4a 	bl	8001e92 <HAL_PCD_EP_Transmit>
 80065fe:	4603      	mov	r3, r0
 8006600:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006602:	7dfb      	ldrb	r3, [r7, #23]
 8006604:	4618      	mov	r0, r3
 8006606:	f000 f841 	bl	800668c <USBD_Get_USB_Status>
 800660a:	4603      	mov	r3, r0
 800660c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800660e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	460b      	mov	r3, r1
 8006626:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006636:	7af9      	ldrb	r1, [r7, #11]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	f7fb fbee 	bl	8001e1c <HAL_PCD_EP_Receive>
 8006640:	4603      	mov	r3, r0
 8006642:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006644:	7dfb      	ldrb	r3, [r7, #23]
 8006646:	4618      	mov	r0, r3
 8006648:	f000 f820 	bl	800668c <USBD_Get_USB_Status>
 800664c:	4603      	mov	r3, r0
 800664e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006650:	7dbb      	ldrb	r3, [r7, #22]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006664:	4b03      	ldr	r3, [pc, #12]	@ (8006674 <USBD_static_malloc+0x18>)
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20000b18 	.word	0x20000b18

08006678 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]

}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	2b03      	cmp	r3, #3
 800669e:	d817      	bhi.n	80066d0 <USBD_Get_USB_Status+0x44>
 80066a0:	a201      	add	r2, pc, #4	@ (adr r2, 80066a8 <USBD_Get_USB_Status+0x1c>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066bf 	.word	0x080066bf
 80066b0:	080066c5 	.word	0x080066c5
 80066b4:	080066cb 	.word	0x080066cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
    break;
 80066bc:	e00b      	b.n	80066d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80066be:	2303      	movs	r3, #3
 80066c0:	73fb      	strb	r3, [r7, #15]
    break;
 80066c2:	e008      	b.n	80066d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80066c4:	2301      	movs	r3, #1
 80066c6:	73fb      	strb	r3, [r7, #15]
    break;
 80066c8:	e005      	b.n	80066d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80066ca:	2303      	movs	r3, #3
 80066cc:	73fb      	strb	r3, [r7, #15]
    break;
 80066ce:	e002      	b.n	80066d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80066d0:	2303      	movs	r3, #3
 80066d2:	73fb      	strb	r3, [r7, #15]
    break;
 80066d4:	bf00      	nop
  }
  return usb_status;
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <memset>:
 80066e4:	4402      	add	r2, r0
 80066e6:	4603      	mov	r3, r0
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d100      	bne.n	80066ee <memset+0xa>
 80066ec:	4770      	bx	lr
 80066ee:	f803 1b01 	strb.w	r1, [r3], #1
 80066f2:	e7f9      	b.n	80066e8 <memset+0x4>

080066f4 <__libc_init_array>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	4d0d      	ldr	r5, [pc, #52]	@ (800672c <__libc_init_array+0x38>)
 80066f8:	4c0d      	ldr	r4, [pc, #52]	@ (8006730 <__libc_init_array+0x3c>)
 80066fa:	1b64      	subs	r4, r4, r5
 80066fc:	10a4      	asrs	r4, r4, #2
 80066fe:	2600      	movs	r6, #0
 8006700:	42a6      	cmp	r6, r4
 8006702:	d109      	bne.n	8006718 <__libc_init_array+0x24>
 8006704:	4d0b      	ldr	r5, [pc, #44]	@ (8006734 <__libc_init_array+0x40>)
 8006706:	4c0c      	ldr	r4, [pc, #48]	@ (8006738 <__libc_init_array+0x44>)
 8006708:	f000 f818 	bl	800673c <_init>
 800670c:	1b64      	subs	r4, r4, r5
 800670e:	10a4      	asrs	r4, r4, #2
 8006710:	2600      	movs	r6, #0
 8006712:	42a6      	cmp	r6, r4
 8006714:	d105      	bne.n	8006722 <__libc_init_array+0x2e>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	f855 3b04 	ldr.w	r3, [r5], #4
 800671c:	4798      	blx	r3
 800671e:	3601      	adds	r6, #1
 8006720:	e7ee      	b.n	8006700 <__libc_init_array+0xc>
 8006722:	f855 3b04 	ldr.w	r3, [r5], #4
 8006726:	4798      	blx	r3
 8006728:	3601      	adds	r6, #1
 800672a:	e7f2      	b.n	8006712 <__libc_init_array+0x1e>
 800672c:	080067e8 	.word	0x080067e8
 8006730:	080067e8 	.word	0x080067e8
 8006734:	080067e8 	.word	0x080067e8
 8006738:	080067ec 	.word	0x080067ec

0800673c <_init>:
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	bf00      	nop
 8006740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006742:	bc08      	pop	{r3}
 8006744:	469e      	mov	lr, r3
 8006746:	4770      	bx	lr

08006748 <_fini>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	bf00      	nop
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr
